extends layout
block page
	
block content
	if (doc)
		- var menu = 'doc'
		- var menuData = doc
		- var pageIndex = pageindex
	else
		if (pageindex)
			- var menu = 'doc'
			- var pageIndex = pageindex
			- var menuData = data[pageindex]
		else
			- var menu = 'home'
			- var pageIndex = data[data.length-1].pageindex
			if (data[data.length-1].content[data[data.length-1].content.length-1].substrates[0] !== undefined)
				- var menuData = data[data.length-1]
			else
				- var menuData = data[0]
	if (index)
		- var contentData = menuData.content[index]
		- var imageUrl = contentData.substrates[contentData.substrates.length-1].image
	else
		- var contentData = menuData.content[menuData.content.length-1]
		- var index = contentData.index
	input(type="hidden", value= pageIndex, id="pageindex")
		//-
			navigation
	div#select(class= type)
		div.menu(class= type)

			div.overtext #{menuData.pagetitle}
			div.blogname
				if (contentData.filling.length > 1)
					span #{contentData.filling[1].name}
					span  and  
				span #{contentData.filling[0].name}

				
			if (type === 'draw')
				if (drawtype === "substrates")
					each sub, i in contentData.substrates
						if (layer === i)
							canvas.canvas.layer.topRight(id="canvas_substrates_"+i+"", style="z-index: "+i+"; cursor: grab;")
				if (drawtype === "filling")
					each fil, j in contentData.filling
						if (layer === j)
							canvas.canvas.layer.topRight(id="canvas_filling_"+j+"", style="z-index: "+j+"; cursor: url('/images/icons/edit.png');")
			canvas.maincanvas.topRight(id="canvas", style="z-index: -1; background-image:url('/images/backgrounds/lvl_"+index+".svg');")
			div.topLeft
		
		div.grid-container(class= type)

			include menu.pug
			if (doc)
				include docgallery.pug
			else
				include datagallery.pug

	//-
		initiate map + event listeners
	script(type="text/javascript").
		const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
		var data = `'#{data}'`
		/*var pageindex = '#{pageindex}'*/
		var mainmenu = document.getElementsByClassName('menu')[0];
		var pageIndex; 
		var drawtype, layer;
		var datalength = #{data.length};
		var doc = `#{JSON.stringify(doc)}`;
		var lMarker;
		var medialength;
		var classname_a;
		var classname_b;
		// paint program adapted from https://rbyers.github.io/paint.html
		var radiusSupported = false;
		var nextCount = 0;
		var touchMap = {};
		var pointMode = (window.location.hash == "#points");
		var pointerEventDisabledMode = (window.location.hash == "#nopointer");
		var enableForce = false;
		var drawTouchMajor = true;
		var foundRotationAngle = false;
		var scale = 1;
		var mousePressed = false;
		var drawCoalesced = false;
		var elem, canvasWidth, canvasHeight;
		
		$(document).ready(function(){
			var can = document.getElementById('canvas');
			can.style.width = '100%';
			can.style.height = '100%';
			pageIndex = parseInt(document.getElementById('pageindex').value, 10);
			console.log('this pageindex'+pageIndex)
			var topmargin = document.querySelector('.pullquote').getBoundingClientRect().height;
			$('.grid-header.mainHeader').css('height', (topmargin + 30) + 'px');
			$('textarea').each(function(){
				var text;
				if ($(this).val()) {
					$(this).css('max-width', '100%')
				} else {
					//placeholder reliably contains updated text fsr
					text = $(this).attr('placeholder');
					$(this).val(text);
					$(this).css('max-width', '100%')
				} 
			});
			
			$('.list > .ms-Panel-main').css({display: 'none'})
			$('.list').removeClass('is-open')
			$('.list').css({display: 'none'})
			$('div.dropdown').slideUp(100);
			$('.drop').slideUp(100);
			$('.selected').removeClass('selected');
			drawtype = '#{drawtype}'
			layer = '#{layer}'
			var id = 'canvas_'+'#{drawtype}'+'_'+'#{layer}'+''
			if (document.getElementById(id) !== null) {
				
				InitializeApp(drawtype, parseInt(layer, 10));
			}
		})
		
		$(document).on('click', 'canvas', function(e){
			if ($('.grid-container').hasClass('selected')) {
				//				e.preventDefault();
				//				InitializeApp();
				$('.menu').css('height', 'var(--windowmenu)');
				$('div.dropdown').slideUp(100);
				$('.drop').slideUp(100);
				$('.selected').removeClass('selected');
			} else {
				//				InitializeApp();
			}
		});
		//drop-down event listener
		$(document).on('click', 'a.dropdown', function (e) { 
			//e.preventDefault();
			var that, main;
			if ($(this).hasClass('mainmenu')) {
				$('.menu').css('height', 'var(--nowindowmenu)')
				that = $('#tlmodules.dropdown');
				main = true;
			} else {
				that = this;
				main = false;
			}
			if ($(that).hasClass('selected')) {
				if (main) {
					$(that).slideUp(100);
				} else {
					$(that).next('.drop').slideUp(100);
				}
				$(that).removeClass("selected");
				$('.grid-container').removeClass('selected');
				var topmargin = document.querySelector('.pullquote').getBoundingClientRect().height;
				$('.grid-header.mainHeader').css('height', topmargin + 30 + 'px');
			} else {
				$(that).addClass('selected');
				$('.grid-container').addClass('selected');
				if (main) {
					$(that).slideDown(200);
				} else {
					$(that).next('.drop').slideDown(200);
				}
				setTimeout(function(){
					var topmargin = document.querySelector('.pullquote').getBoundingClientRect().height;
					$('.grid-header.mainHeader').css('height', topmargin + 30 + 'px');
				}, 210);
			}
			//e.stopPropagation();
		});
		//gallery
		$(document).on('click', 'a.thumbnail', function(e){
			e.preventDefault()
			var imgindex = $(this).attr('id')
			var userid = $(this).attr('name').split('@')[0]
			if ($(this).hasClass('gallery')) {
				var windex = $(this).attr('name').split('@')[1];
				//var index = windex.split('all_')[1];
				$.post('/gallery/'+pageid+'/'+windex+'/'+imgindex+'', function(){
					window.location.href = '/gallery/'+pageid+'/'+windex+'/'+imgindex+'/#scrollto_'+index+'@'+imgindex+''
				})
			} else {
				var windex = $(this).attr('name').split('@')[1];
				
				$.post('/gallery/'+pageid+'/'+windex+'/'+imgindex+'', function(){
					window.location.href = '/gallery/'+pageid+'/'+windex+'/'+imgindex+''
				})
			}
			return false;
		});				
		//expand the edit-able sections
		$(document).on('click', '#editform', function(){
			if ($('#formshow').css('display') === 'none') {
				document.getElementById('select').className = 'map';
				document.getElementsByClassName('menu')[0].className = 'menu map';//+ #{type} +''
				document.getElementById('formshow').style.display = 'block';
				//$('#formshow').css('display', 'block');
				document.getElementById('map').style.visibility = 'visible';
				$('#editform > span').html('Hide Feature details');
				lMarker.dragging.enable();
				console.log(lMarker)
				beginFeatureDrag();
			} else {
				document.getElementById('select').className = 'blog';
				document.getElementsByClassName('menu')[0].className = 'menu blog'
				//$('#formshow').css('display', 'none');
				document.getElementById('formshow').style.display = 'none';
				document.getElementById('map').style.visibility = 'visible';
				$('#editform > span').html('Show Feature details');
				lMarker.dragging.disable();
				endFeatureDrag();
			}
		})
		$(document).on('click', '#editmedia', function(){
			if ($('#mediashow').css('display') === 'none') {
				$('#mediashow').css('display', 'block');
				$('#editmedia > span').html('Hide Media details')
			} else {
				$('#mediashow').css('display', 'none');
				$('#editmedia > span').html('Show Media details')
			}
		})
		
		$(document).on('click', '#editlayout', function(){
			if ($('#layoutshow').css('display') === 'none') {
				$('#layoutshow').css('display', 'block');
				$('#editlayout > span').html('Hide Layout details')
			} else {
				$('#layoutshow').css('display', 'none');
				$('#editlayout > span').html('Show Layout details')
			}
		});
		//edit mode
		$(document).on('click', '#deletefeature', function(){

			if ($('#deletefeature span').css('display') === 'block') {
				$(this).attr("href", "/api/deletefeature/"+pageIndex+"/"+#{index}+"");
			} else {
				$('#deletefeature span').css('display', 'block')
			}
		})
		//check / uncheck
		$(document).on('click', '.ms-ChoiceField-field', function(e){
			e.preventDefault;
			var that = $(this);
			var id = that.attr('id');
			if (that.siblings('input').hasClass('is-checked')) {
				that.siblings('input').removeClass('is-checked')
				that.siblings('input').attr('aria-checked', 'false')
				that.siblings('input').removeAttr('checked');
				$('#input_date2').parent('.ms-TextField').removeClass('is-disabled');
				
			} else {
				that.siblings('input').addClass('is-checked')
				that.siblings('input').attr('aria-checked', 'true');
				//that.siblings('input').attr('checked', 'checked');
				$('#input_date2').val('');
				$('#input_date2').parent('.ms-TextField').addClass('is-disabled');
			}
		})
		//live update of 'layout' / wip
		/*
				$('#inputtext').on('mouseup', function(e){
						
					var whole = e.target.value.split("")
					var selObj = window.getSelection();
					console.log(selObj.toString());
					var selRange = selObj.getRangeAt(0)
					console.log(selRange)
					var select = selObj.toString();
					
					whole.splice(selObj.focusOffset, selObj.length, "<span class='highlight'>"+select+"</span>");
					$('#previewtext').html(marked(whole.join("")))
				})
		*/
		$('#inputtext').on('keyup', function(e){
			$('#previewtext').html(marked(e.target.value))
		});
		$('input').on('keydown', function(e){
			if (e.key === 'Slash') {
				e.preventDefault();
			}
		})
		$(document).on('click', '#save', function(e){
			e.preventDefault();
			//$('.grid-container.inner > .grid-mid').prepend('<canvas id="wipcanvas"></canvas>');
			var id = 'canvas_'+'#{drawtype}'+'_'+'#{layer}'+''
			elem = document.getElementById(id);
			/*var w = 400;
			var h = 400;*/
			//setTimeout(function(){
			console.log('#{drawtype}', '#{layer}', id, elem);
			if (elem !== null) {
				saveImage(elem)
			} else {
				console.log('wtf')
			}
			
			//}, 200);
		})
		
		function InitializeApp(drawtype, layer) {
			console.log(drawtype, layer)
			var elem = document.getElementById('canvas_'+drawtype+'_'+layer+'');
			console.log(elem)
			InitializeCanvas(drawtype, layer);
			if (elem) {
				if (window.PointerEvent && !pointerEventDisabledMode) {
					console.log("Adding PointerEvent listeners");
					["pointerdown", "pointermove", "pointerup"].forEach(function(e) {
							elem.addEventListener(e, PointerHandler);
					});
				} else {
					console.log("Adding MouseEvent & TouchEvent listeners");
					["mousedown", "mousemove", "mouseup"].forEach(function(e) {
							elem.addEventListener(e, MouseHandler);
					});
					["touchstart", "touchmove", "touchend"].forEach(function(e) {
							elem.addEventListener(e, TouchHandler);
					});
				}
				window.addEventListener("resize", function(e) {
					InitializeCanvas(drawtype, layer);
				});
			}
			
			//console.log(elem)
			//drawtype = '#{drawtype}'
			//layer = #{layer}
			/*if (document.getElementById('canvas_'+drawtype+'_'+layer+'')) {
				
			}*/
			/* else {
				elem = document.getElementById('canvas');
			}
			
			/*var canv = document.getElementById("canvas");
			canvasWidth = canv.width;
			canvasHeight = canv.height;
			var layers = document.getElementsByClassName('layer');
			for (var i in layers) {
				layers[i].width = canvasWidth;
				layers[i].height = canvasHeight;
			}*/
			

			

			/*document.addEventListener("keyup", function(e) {
				switch(e.which) {
				// ESC
				case 27:
					var canvas = document.getElementById("canvas_"+drawtype+"_"+layer+"");
					canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
					break;

				// p
				case 80:
					pointMode = !pointMode;
					window.location.hash = pointMode ? "#points" : "";
					break;

				// f
				case 70:
					enableForce = !enableForce;
					break;

				// a
				case 65:
					drawTouchMajor = !drawTouchMajor;
					break;

				// c
				case 67:
					drawCoalesced = !drawCoalesced;
					break;

				// enter
				case 13:
					if (document.documentElement.webkitRequestFullscreen) {
						if (document.webkitFullscreenElement)
							document.webkitCancelFullScreen();
						else
							document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
					}
				}
			});
			//console.log(elem)*/
			
		}
		function InitializeCanvas(drawtype, layer) {
			var canv = document.getElementById("canvas");
			//elem = document.getElementById("canvas_"+drawtype+"_"+layer+"");
			var newscale = window.devicePixelRatio ? window.devicePixelRatio : 1;
			if (navigator.platform.split('Mac')[1] !== undefined) {
				console.log(navigator.platform)
				newscale = 1
			}
			var newwidth = window.screen.width * newscale;
			var newheight = window.screen.height * newscale;
			var thislayer;
			if (canv.width != newwidth || canv.height != newheight || scale != newscale) {
				// resizing a canvas clears it, so do it only when it's dimensions have changed.
				canvasWidth = newwidth;
				canvasHeight = newheight;
				canv.width = canvasWidth;
				canv.height = canvasHeight;
				canv.style.width = newwidth + "px";
				canv.style.height = newheight + "px";
				var elem = document.getElementById('canvas_'+drawtype+'_'+layer+'');
				/*var layers = document.getElementsByClassName('layer');
				for (var i = 0;  i < layers.length; i++) {*/
					elem.width = canvasWidth;
					elem.height = canvasHeight;
					elem.style.width = newwidth + "px";
					elem.style.height = newheight + "px";
					
					/*if (i === parseInt(layer, 10)) {
						//console.log(layers.item(i), layers[i])
						
						//thislayer = layers.item(i);
					}*/
					/*layers[i].style.width = window.screen.width + "px";
					layers[i].style.height = window.screen.height + "px";*/
					
				//}
				scale = newscale;

				/*elem.width = newwidth;
				elem.height = newheight;*/
				
			}
			//elem = document.getElementById('canvas_'+drawtype+'_'+layer+'')
			//$('#select').prepend('<button id="save" style="z-index: 9999;position: absolute;">save</button>');

		}
		function PointerHandler(event) {
			event.preventDefault();
			
			if (event.type == "pointerdown" && event.button === 0)
				mousePressed = true;

			if (mousePressed || event.type == "pointerup" || (event.buttons & 1)) {
				var fakeTouch = {
					identifier: event.pointerId,
					pageX : event.pageX,
					pageY : event.pageY,
					radiusX : event.width,
					radiusY : event.height,
					force : event.pressure,
				};
				//var eventTarget = event//.target;
				var eventType = event.type == "pointerdown" ? "touchstart" :
					event.type == "pointerup" ? "touchend" : "touchmove";
				event.preventDefault();
				drawTouch(event.target, fakeTouch, eventType, false);

				/*if (drawCoalesced && event.getCoalescedEvents) {
					var points = event.getCoalescedEvents();
					for(let coalesced of points) {
						fakeTouch.pageX = coalesced.pageX;
						fakeTouch.pageY = coalesced.pageY + 50;
						fakeTouch.radiusX = coalesced.width;
						fakeTouch.radiuxY = coalesced.height;
						fakeTouch.force = coalesced.pressure;

						drawTouch(event.target, fakeTouch, eventType, true);
					}
				}*/
			}

			if (event.type == "pointerup")
				mousePressed = false;
			
			/*if (mainmenu.classList.contains('selected'))
				mousePressed = false;
				
			if (document.getElementsByClassName('grid-container')[0].classList.contains('selected'))
				mousePressed = false;*/
		}
		function MouseHandler(event) {

			if (event.type == "mousedown" && event.button === 0) {
				mousePressed = true;
			}
				
			if (mousePressed && event.button === 0) {
				var fakeTouch = {
					identifier : 10,
					pageX : event.pageX,
					pageY : event.pageY
				};
				
				var eventType = event.type ==  "mousedown" ? "touchstart" :
						event.type == "mouseup" ? "touchend" : "touchmove";
				//var eventTarget = event;

				drawTouch(event.target, fakeTouch, eventType, false);
				event.preventDefault();
			}

			if (event.type == "mouseup")
				mousePressed = false;
			
			/*if (mainmenu.classList.contains('selected')) {
				console.log('selected menu')
				mousePressed = false;
			}
			if (document.getElementsByClassName('grid-container')[0].classList.contains('selected'))
				mousePressed = false;*/
					
		}
		function TouchHandler(event) {
			event.preventDefault();
			
			if (!mainmenu.classList.contains('selected')) {
				for (var i = 0; i < event.changedTouches.length; i++)
					//var eventTarget = event;//.target;
					drawTouch(event.target, event.changedTouches[i], event.type, false);
			}
			
		}
		function drawTouch(eventTarget, touch, eventType, coalesced) {
			var context = eventTarget.getContext("2d");
			var drawType = eventTarget.getAttribute('id').split('_')[1];
			var layer = eventTarget.getAttribute('id').split('_')[2];
			
			// Map the identifier to a small count (no-op on Chrome, but
			// important for mobile Safari).
			if (!(touch.identifier in touchMap)) {
				touchMap[touch.identifier] = nextCount;
				nextCount++;
			}

			// Polyfill non-standard properties
			if (!("radiusX" in touch) && "webkitRadiusX" in touch)
				touch.radiusX = touch.webkitRadiusX;
			if (!("radiusY" in touch) && "webkitRadiusY" in touch)
				touch.radiusY = touch.webkitRadiusY;
			if (!("rotationAngle" in touch) && "webkitRotationAngle" in touch)
				touch.rotationAngle = touch.webkitRotationAngle;
			if (!("force" in touch) && "webkitForce" in touch)
				touch.force = touch.webkitForce;

			var radiusX = getAdjustedRadius(touch.radiusX, touch.radiusY);
			var radiusY = getAdjustedRadius(touch.radiusY, touch.radiusX);
			var rotationAngle = getAdjustedRotationAngle(touch.rotationAngle);
			foundRotationAngle = foundRotationAngle || rotationAngle;
			var opacity, hue, lum, pattern;

			// Try to avoid start/end ellipses overlapping exactly
			if (eventType == "touchend") {
				radiusX++;
				radiusY++;
			}
			if (drawType === 'filling') {
				//context.globalAlpha = 0;
				var img = new Image();
				img.src = '/images/ingredients/'+drawtype+'_'+layer+'.svg';
				
				img.onload = function(){
					pattern = context.createPattern(img, 'repeat');
				};
				
			} else {
				if (eventType != "touchend") {
					opacity = drawType === 'filling' ? 1 : 0.1;
					hue = (touchMap[touch.identifier] * 30) % 256;
					if (coalesced)
						hue += 10;
					lum = 40;
					if (enableForce && touch.force)
						lum = Math.round(touch.force / 0.4 * 50 + 20);
					
				}
				
			}
			function alphaDraw() {
				
				//pattern.setTransform(matrix.rotate(-45).scale(1.5));
				//context.fillStyle = 'rgba(255,255,255, 0.4)';
				
			}
			context.save();
			context.translate(touch.pageX * scale, touch.pageY * scale);
			context.rotate(rotationAngle);
			context.scale(1, radiusY/radiusX);
			context.beginPath();
			context.arc(0, 0, radiusX, 0, 2.0 * Math.PI, false);
			context.closePath();
			//context.fillStyle = "hsla(100%,100%,100%, 1)";
			// Fill the ellipse on start/move
			if (eventType != "touchend") {
				/*var opacity = 1//drawType === 'filling' ? 1 : 0.1;
				var hue = (touchMap[touch.identifier] * 30) % 256;
				if (coalesced)
					hue += 10;
				var lum = 40;
				if (enableForce && touch.force)
					lum = Math.round(touch.force / 0.4 * 50 + 20);
				
				*/
				if (drawType === 'filling') {
					/*var r = eventTarget.getBoundingClientRect(),
					x = touch.pageX - r.left,
					y = touch.pageY - r.top;
					context.beginPath();
					context.moveTo(x + 35, y);
					context.arc(x, y, 35, 0, 2*Math.PI);*/
				
					//context.fillRect(0, 0, canvasWidth, canvasHeight);
				/*} else {
					context.fillStyle = "hsla(" + hue + ",100%," + lum + "%, " + opacity + ")";
				//context.fillStyle = "alpha(opacity="+opacity+");"
			}*/
					context.fillStyle = pattern;
				} else {
					context.fillStyle = "hsla(" + hue + ",100%," + lum + "%, " + opacity + ")";
					console.log(context.fillStyle);
				}
				
				context.fill();
			}

			// Outline ellipse on start/end
			if (eventType != "touchmove") {
				context.strokeStyle = eventType == "touchstart" ? "black" : "grey";
				context.lineWidth = 2;
				context.stroke();
			}

			/*if (drawTouchMajor && foundRotationAngle) {
				context.strokeStyle = "#fff";
				context.lineWidth = 1;
				context.beginPath();
				if (radiusX >= radiusY) {
					context.moveTo(-radiusX, 0);
					context.lineTo(radiusX, 0);
				} else {
						// Note that this is also radiusX, because of the scaling above
					context.moveTo(0, -radiusX);
					context.lineTo(0, radiusX);
				}
				context.stroke();
			}*/

			context.restore();
		}
		function getAdjustedRadius(radius, otherRadius) {
			if (pointMode)
					return 1;

			// Spec says to use 1 for unknown radius, can't differentiate between that
			// and real 1 pixel radius.
			var radiusUndefined = !radius || radius <= 1;
			var otherRadiusUndefined = !otherRadius || otherRadius <= 1;

			if (radiusUndefined) {
					radius = otherRadiusUndefined? 15 : otherRadius;
			}

			if (radius > 100) {
					console.error("Got large radius: " + radius);
					radius = 100;
			}

			return radius * scale;
		}
		function getAdjustedRotationAngle(angle) {
			return angle * Math.PI / 180;
		}
		
		function saveImage(can){
			if (!HTMLCanvasElement.prototype.toBlob) {
				Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
					value: function (callback, type, quality) {

						var binStr = atob( this.toDataURL(type, quality).split(',')[1] ),
							len = binStr.length,
							arr = new Uint8Array(len);

						for (var i = 0; i < len; i++ ) {
							arr[i] = binStr.charCodeAt(i);
						}

						callback( new Blob( [arr], {type: type || 'image/png'} ) );
					}
				});
			}
			layer = can.getAttribute('id').split('_')[2];
			drawtype = can.getAttribute('id').split('_')[1];
			if (drawtype && drawtype !== undefined) {
				can.toBlob(function(blob) {
					var fd = new FormData();
					
					fd.append('img_'+drawtype+'_'+layer+'', blob);
					
					var uploadurl = '/api/uploadmedia/'+#{pageindex}+'/'+#{index}+'/'+drawtype+'/'+layer+'';

					console.log(blob)
					console.log(uploadurl)
					$.ajax({
						url: uploadurl,
						type: 'POST',
						data: fd,
						processData: false,
						contentType: false,
						success: function(response) {
							$('#inputimg_'+drawtype+'_'+layer+'').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''));
							//$('#form').submit();
							$('a.mainmenu').removeClass('dropdown');
							$('a.mainmenu').addClass('dropdown');
							$('a.mainmenu').attr('title', 'Menu');
							$('a.mainmenu').html('<img class="i" src="http://pu.bli.sh/images/menu_button.svg"></img>')
							//InitializeApp('#{drawtype}', '#{layer}');
						}
						
					})
				}, 'image/png'/*, 0.95*/);
			} else {
				can.toBlob(function(blob) {
					var fd = new FormData();
					
					fd.append("img", blob);
					
					var uploadurl = '/api/uploadmedia/'+#{pageindex}+'/'+#{index}+'/'+false+'/'+false+'';

					console.log(blob)
					console.log(uploadurl)
					$.ajax({
						url: uploadurl,
						type: 'POST',
						data: fd,
						processData: false,
						contentType: false,
						success: function(response) {
							
								$('#inputimg').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''));
								$('a.mainmenu').removeClass('dropdown');
								$('a.mainmenu').addClass('dropdown');
								$('a.mainmenu').attr('title', 'Menu');
								$('a.mainmenu').html('<img class="i" src="http://pu.bli.sh/images/menu_button.svg"></img>')
																//$('#form').submit();
								//InitializeApp('#{drawtype}', #{layer})
							}
						
					})
				}, 'image/png'/*, 0.95*/);
			}
		}