extends layout
block page
	- var ranks = ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth"];
	- var keys = ["tools", "info", "substrates", "filling"]

	if (doc)
		
		- var menu = 'doc'
		- var menuData = doc
		- var pageIndex = pageindex
	else
		if (loggedin)
			if (pageindex)
				- var menu = 'doc'
				- var pageIndex = pageindex
				- var menuData = data[pageindex]
			else
				- var menu = 'home'
				- var pageIndex = data[data.length-1].pageindex
				- var menuData = data[data.length-1]
		else
			- var menu = 'home'
			- var pageIndex = data[data.length-1].pageindex
			- var menuData = data[data.length-1]
	if (index)
		- var contentData = menuData.content[index]
	else
		- var contentData = menuData.content[menuData.content.length-1]
		- var index = contentData.index

	- var layer = contentData.level
block content
	
	- var keys = ["tools", "info", "substrates", "filling"]
	- var allergies = menuData.publishers[0].allergies;
	input(type="hidden", value= pageIndex, id="pageindex")
		//-
			navigation
	div#select(class= type)
		div.menu(class= type)

			div.overtext #{menuData.pagetitle}
			div.blogname
				if (contentData.filling[contentData.level] !== undefined && drawtype)
					if (allergies.length && allergies.indexOf(contentData.filling[contentData.level].name) === -1 && contentData.level > 0)
						span.translate #{contentData.filling[contentData.level].name}
						span  and 
					else
						if (contentData.filling[contentData.level-1] !== undefined && contentData.level - 1 > 0)
							span.translate #{contentData.filling[contentData.level-1].name}
							span  and 
						else
							if (contentData.filling[contentData.level+1] !== null)
								span.translate #{contentData.filling[contentData.level+1].name}
								span  and 
				span.translate #{contentData.filling[0].name}
			
			if (drawtype && drawtype !== "tools")
				if (menuData.publishers[0].username === loggedin)
						
					canvas.canvas.layer.topRight(id="canvas_"+drawtype+"_"+layer+"", style="z-index: "+layer+"; cursor: grab; background-image:url('/images/info/info_0.svg');")
			if (contentData.level === 3)
				canvas.maincanvas.topRight(id="canvas", style="z-index: -1; background-image:url('/images/backgrounds/backgrounds_"+1+".svg');")
			else
				canvas.maincanvas.topRight(id="canvas", style="z-index: -1; background-image:url('/images/backgrounds/backgrounds_0.svg');")
			div.topLeft
		
		div.grid-container(class= type)

			include menu.pug
			if (doc)
				include docgallery.pug
			else
				include datagallery.pug
		
		
				

	//-
		initiate map + event listeners
	script(type="text/javascript").
		function uiBlogMode(){
			$('div.menu.draw').removeClass('draw');
			$('div.menu').addClass('blog');
			$('.grid-container').removeClass('draw');
			$('.grid-container').addClass('blog');
			$('.grid-container').addClass('selected');
			$('#select').removeClass('draw');
			$('#select').addClass('blog');
		}
		function uiDrawMode(){
			$('div.menu.blog').removeClass('blog');
			$('div.menu').addClass('draw');
			$('.grid-container').removeClass('blog');
			$('.grid-container').addClass('draw');
			$('.grid-container').removeClass('selected');
			$('#select').removeClass('blog');
			$('#select').addClass('draw');
		}
		const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
		/*var pageindex = '#{pageindex}'*/
		var mainmenu = document.getElementsByClassName('menu')[0];
		var pageIndex, drawtype, layer;
		var datalength = #{data.length};
		/*var doc = `#{doc}`*/
		var index = #{index}
		
		var lMarker;
		var medialength;
		var classname_a;
		var classname_b;
		// paint program adapted from https://rbyers.github.io/paint.html
		var radiusSupported = false;
		var nextCount = 0;
		var touchMap = {};
		var foundRotationAngle = false;
		var scale = 1;
		var mousePressed = false;
		var drawCoalesced = false;
		var elem, canvasWidth, canvasHeight;
		/*$('img').each(function(img){
			if (img.src === (unknown))
		})*/
		$(document).ready(function(){
			var can = document.getElementById('canvas');
			can.style.width = '100%';
			can.style.height = '100%';
			pageIndex = parseInt(document.getElementById('pageindex').value, 10);
			console.log('this pageindex'+pageIndex)
			//var topmargin = document.querySelector('.pullquote').getBoundingClientRect().height;
			//$('.grid-header.mainHeader').css('height', (topmargin + 30) + 'px');
			$('textarea').each(function(){
				var text;
				if ($(this).val()) {
					$(this).css('max-width', '100%')
				} else {
					//placeholder reliably contains updated text fsr
					text = $(this).attr('placeholder');
					$(this).val(text);
					$(this).css('max-width', '100%')
				} 
			});
			
			$('.list > .ms-Panel-main').css({display: 'none'})
			$('.list').removeClass('is-open')
			$('.list').css({display: 'none'});
			
			$('.dropdown').not('.mainmenu').slideUp(100);
			$('.drop').slideUp(100);
			$('.selected').removeClass('selected');
			drawtype = '#{drawtype}'
			layer = '#{layer}'
			console.log(drawtype, layer)

			if (drawtype && drawtype !== '' && '#{infowindow}' === 'edit') {
				console.log('initializing app')
				InitializeApp(drawtype, layer)
			} else {
				$.get('/doc/'+'#{pageindex}'+'', function(res){
					if (!res || res == undefined || res == null) {
						
					}
					else {
						InitializeCanvas("main", res.content.length-1)
					}
				})
			}
			
		})
		$(document).on('click', '#deletefeature', function(e){
			e.preventDefault();
			if ($('#deletefeature span').css('display') === 'block') {
				$(this).attr("href", "/api/deletefeature/"+'#{pageindex}'+"/"+'#{index}'+"");
			} else {
				$('#deletefeature span').css('display', 'block')
			}
		})
		
		$('#inputtext').on('keyup', function(e){
			$('#previewtext').html(marked(e.target.value))
		});
		$('input').on('keydown', function(e){
			if (e.key === 'Slash') {
				e.preventDefault();
			}
		})
		function InitializeApp(drawtype, layer) {
			var elem = document.getElementById('canvas_'+drawtype+'_'+layer+'');
			InitializeCanvas(drawtype, layer);
			if (elem) {
				["mousedown", "mousemove", "mouseup"].forEach(function(e) {
						elem.addEventListener(e, MouseHandler);
				});
				["touchstart", "touchmove", "touchend"].forEach(function(e) {
						elem.addEventListener(e, TouchHandler);
				});
				window.addEventListener("resize", function(e) {
					InitializeCanvas(drawtype, layer);
				});
			}
			
		}
		function InitializeCanvas(drawtype, layer) {
			var canv = document.getElementById("canvas");
			//var context = elem.getContext("2d");
			//elem = document.getElementById("canvas_"+drawtype+"_"+layer+"");
			/*var newscale = window.devicePixelRatio ? window.devicePixelRatio : 1;
			if (navigator.platform.split('Mac')[1] !== undefined) {
				newscale = 1
			}*/
			var newwidth = window.innerWidth;//window.screen.width// * newscale;////window.screen.width * newscale;
			var newheight = window.innerHeight;//window.screen.height// * newscale;////window.screen.height * newscale;
			/*var thislayer;*/
			//var size;
			var id = 'canvas_'+'#{drawtype}'+'_'+'#{layer}'+'';
			var elem = document.getElementById(id)
			//} else {
			//	elem = null;
			//}
			if (canv.width != newwidth || canv.height != newheight) {
				// resizing a canvas clears it, so do it only when it's dimensions have changed.
				canvasWidth = newwidth;
				canvasHeight = newheight;
				//size = Math.min(canvasWidth, canvasHeight);
				canv.width = canvasWidth;
				canv.height = canvasHeight;
				canv.style.width = canvasWidth + "px";
				canv.style.height = canvasHeight + "px";
				//var elem = document.getElementById('canvas_'+drawtype+'_'+layer+'');
				if (elem !== null && elem !== undefined) {
					if (elem.width != newwidth || elem.height != newheight || scale != newscale) {
						
						elem.width = canvasWidth;
						elem.height = canvasHeight;
						elem.style.width = canvasWidth + "px";
						elem.style.height = canvasHeight + "px";
					}
				}
				//scale = newscale;
			}/* else {
				size = Math.min(newwidth, newheight)
			}*/
			
						
			if ('#{drawtype}' !== "info" && '#{drawtype}' !== "tools" && '#{drawtype}' !== '') {
				$.get('/doc/'+'#{pageindex}'+'', function(res){
					//console.log(res)
					
					var img = document.createElement('img');
					var mainimg = document.createElement('img');
					var index = '#{index}'
					var layer = '#{layer}'
					var mainsrc;
					if (index !== '') {
						mainsrc = res.content[index].image;
						console.log(mainsrc)
						if (mainsrc !== undefined && mainsrc !== '') {
							var imgobj = new Image()//document.createElement('img');
							imgobj.onload = function(){
								var cx = canv.getContext('2d');
								imgobj.width = canvasWidth;
								imgobj.height = canvasHeight;
								cx.drawImage(imgobj, 0, 0, canvasWidth, canvasHeight)
							}
							imgobj.src = res.content[index].image;
						}

						if (document.getElementById(id) !== null && '#{drawtype}' !== '' && '#{drawtype}' !== 'info' && '#{drawtype}' !== 'tools') {
							layer = parseInt(layer, 10)
							var irr, irrname;
							var index = '#{index}'
								index = parseInt(index, 10)
							if (res.content[index][drawtype] !== undefined) {
								if (res.content[index][drawtype][layer+1]) {
									irr = res.content[index][drawtype][layer+1];									
								}
							} else {
								irr = undefined;
							}
								
							
							if ('#{index}' !== '' && '#{infowindow}' === "edit" && irr !== undefined && irr.spec.safety !== 'bacteria') {
								id = 'canvas_'+'#{drawtype}'+'_'+'#{layer}'+'';
								if ($('#select').hasClass('draw')) {
									drawModeModal(id, '#{pageindex}')
									
								}
							}
						}
					}
				})
			}
		}
		
		function MouseHandler(event) {

			if (event.type == "mousedown" && event.button === 0) {
				mousePressed = true;
			}
				
			if (mousePressed && event.button === 0) {
				var fakeTouch = {
					identifier : 10,
					pageX : event.pageX,
					pageY : event.pageY
				};
				
				var eventType = event.type ==  "mousedown" ? "touchstart" :
						event.type == "mouseup" ? "touchend" : "touchmove";
				
				drawTouch(event.target, fakeTouch, eventType, false);
				event.preventDefault();
			}

			if (event.type == "mouseup")
				mousePressed = false;
		}
		function TouchHandler(event) {
			event.preventDefault();
			
			if (!mainmenu.classList.contains('selected')) {
				for (var i = 0; i < event.changedTouches.length; i++)
					drawTouch(event.target, event.changedTouches[i], event.type, false);
			}
			
		}
		
		function drawTouch(eventTarget, touch, eventType, coalesced) {
			var canv = document.getElementById('canvas');
			var ctx = canv.getContext('2d');

			var context = eventTarget.getContext("2d");
			var drawType = eventTarget.getAttribute('id').split('_')[1];
			var layer = parseInt(eventTarget.getAttribute('id').split('_')[2], 10);

			if (!(touch.identifier in touchMap)) {
				touchMap[touch.identifier] = nextCount;
				nextCount++;
			}

			// Polyfill non-standard properties
			if (!("radiusX" in touch) && "webkitRadiusX" in touch)
				touch.radiusX = touch.webkitRadiusX;
			if (!("radiusY" in touch) && "webkitRadiusY" in touch)
				touch.radiusY = touch.webkitRadiusY;
			if (!("rotationAngle" in touch) && "webkitRotationAngle" in touch)
				touch.rotationAngle = touch.webkitRotationAngle;
			if (!("force" in touch) && "webkitForce" in touch)
				touch.force = touch.webkitForce;

			var radiusX = 35;
			var radiusY = 35;
			var rotationAngle = getAdjustedRotationAngle(touch.rotationAngle);
			foundRotationAngle = foundRotationAngle || rotationAngle;
			
			// Try to avoid start/end ellipses overlapping exactly
			if (eventType == "touchend") {
				radiusX++;
				radiusY++;
			}
			
			
			//
			context.save();
			context.translate(touch.pageX * scale, touch.pageY * scale);
			context.scale(1, radiusY/radiusX);
			context.beginPath();
			context.arc(0, 0, radiusX, 0, 2.0 * Math.PI, false);
			context.closePath();
			if (drawType !== "info" && drawType !== "tools") {
				var img = document.createElement('img');
				img.onload = function(){
					var pattern;
					var context = eventTarget.getContext("2d");
					//var canv = document.getElementById('canvas');
					//var ctx = canv.getContext('2d');
					
					

					var pCanvas = document.createElement("canvas");
					pCanvas.width = canvasWidth;
					pCanvas.height = canvasHeight;
					var pContext = pCanvas.getContext("2d");
					pContext.fillStyle = pContext.drawImage(img, 0, 0, canvasWidth, canvasHeight);

					pContext.fill();
					//if (eventType == "touchend") {
						if (drawType === 'filling') {
							//context.globalCompositeOperation = 'destination-over';
							eventTarget.setAttribute('style', 'cursor: url("/images/icons/tools_1.svg"), grabbing;');
							context.fillStyle = context.createPattern(pCanvas, 'no-repeat');
							context.fill()
						}
						if (drawType === 'substrates') {
							eventTarget.setAttribute('style', 'cursor: url("/images/icons/tools_'+layer+'.svg"), grabbing;');
							//context.globalCompositeOperation = 'destination-in';
							var size = Math.min(canvasWidth, canvasHeight) / 2
							img.width = size;
							img.height = size;
							img.style.width = size  + "px";
							img.style.height = size  + "px";
							if (layer === 0) {
								
								context.fillStyle = 'rgba(255,255,255,0)'//context.createPattern(pCanvas, 'no-repeat');
								context.fill();
								//ctx.globalCompositeOperation = 'destination-atop';
								ctx.fillStyle = 'rgba(255,255,255,0)';//
								ctx.fill()
								
							} else {
								if (eventType == 'touchend') {
									var imagedata = ctx.getImageData(size, size, 1, 1);

									var count = 0;
									for (var x = 0; x < 1; x++) {
										for (var y = 0; y < 1; y++) {
											// imagedata index for each pixel in bounds
											var pxX = (y * 1 + x) * 4;

											if (imagedata.data[pxX + 3] > 0) {
												count++
											}
										}
									}
									if (canvasWidth > canvasHeight) {
										if (count > 0) {
											context.fillStyle = context.drawImage(img, size+(size/2), size - (size/2), size, size);
											context.fillRect(img, size+(size/2), size - (size/2), size, size)
										} else {
											context.fillStyle = context.drawImage(img, size - (size/2), size - (size/2), size, size);
											context.fillRect(img, size - (size/2), size - (size/2), size, size)
										}
									} else {
										if (count > 0) {
											context.fillStyle = context.drawImage(img, size, size - (size/2), size, size);
											context.fillRect(img, size, size - (size/2), size, size)
										} else {
											context.fillStyle = context.drawImage(img, size - (size/1.1), size - (size/2), size, size);
											context.fillRect(img, size - (size/1.1), size - (size/2), size, size)
										}
									}
								}
								

							}
						}
					//}				
					if (eventType != "touchmove" && eventType != "touchend") {
						if (drawType === "substrates" && layer === 0) {
							//ctx.globalCompositeOperation = 'destination-atop';
							context.fillStyle = 'rgba(255,255,255,0)'//context.createPattern(canv, 'no-repeat');
							context.fill()
							ctx.fillStyle = 'rgba(255,255,255,0)';//context.createPattern(canvas, 'no-repeat');//
							ctx.fill()
						}
					}
					if (eventType == "touchmove") {
						if (drawType === "substrates" && layer === 0) {
							//ctx.globalCompositeOperation = 'destination-atop';
							context.fillStyle = 'rgba(255,255,255,0)'//context.createPattern(canv, 'no-repeat');
							context.fill()
							ctx.fillStyle = 'rgba(255,255,255,0)';//context.createPattern(canvas, 'no-repeat');//
							ctx.fill()
						}
					}
					
				}
				img.src = '/images/'+drawType+'/'+drawType+'_'+layer+'.svg';

				context.restore();
			}
			

			
		}
		
		function getAdjustedRotationAngle(angle) {
			return angle * Math.PI / 180;
		}
		
		function saveImage(can){
			var mainCanvas = document.getElementById('canvas');
			//var width = mainCanvas.getBoundingClientRect().width;
			//var height = mainCanvas.getBoundingClientRect().height;
			var context = mainCanvas.getContext("2d");
			if (!HTMLCanvasElement.prototype.toBlob) {
				Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
					value: function (callback, type, quality) {

						var binStr = atob( this.toDataURL(type, quality).split(',')[1] ),
							len = binStr.length,
							arr = new Uint8Array(len);

						for (var i = 0; i < len; i++ ) {
							arr[i] = binStr.charCodeAt(i);
						}

						callback( new Blob( [arr], {type: type || 'image/png'} ) );
					}
				});
			}
			var layer = can.getAttribute('id').split('_')[2];
			var drawtype = can.getAttribute('id').split('_')[1];
			if (drawtype && drawtype !== undefined) {
				can.toBlob(function(blob) {
					var fd = new FormData();
					
					fd.append('img_'+drawtype+'_'+layer+'', blob);
					
					var uploadurl = '/api/uploadmedia/'+'#{pageindex}'+'/'+'#{index}'+'/'+drawtype+'/'+layer+'';

					$.ajax({
						url: uploadurl,
						type: 'POST',
						data: fd,
						processData: false,
						contentType: false,
						success: function(response) {
							//delete blob;
							var imgurl = response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', '');
							$('#inputimg_'+drawtype+'_'+layer+'').val(imgurl);
							var text = '';
							var index = '#{index}';
							
							if (index !== '') {
								index = parseInt(index, 10);
								layer = parseInt(layer, 10);
								$.get('/doc/'+'#{pageIndex}'+'', function(res){
									var level = parseInt(res.content[index].level, 10);
									var filling = res.content[index].filling;
									var allergies = res.publishers[0].allergies;
									if (filling[layer] !== undefined && allergies.indexOf(filling[layer].name) === -1 && layer > 0){
										text += filling[layer].name
									}
									if (text !== '') {
										text += ' and '
									}
									else {
										if (filling[layer-1] !== undefined && filling[layer-1].image !== ''){
											text += filling[layer-1].name
										}
										else {
											if (filling[level+1] !== undefined && filling[level+1].image !== ''){
												text += filling[layer+1].name
											}
										}
										if (text !== '') {
											text += ' and '
										}
									}
										
									text += filling[0].name;
									$('#title').val(text);
									/*var img = new Image();//document.createElement('img');
									img.onload = function(){
										//context.fillRect(img,0,0,canvasWidth,canvasHeight)
										
										
									}
									img.src = imgurl;//'/images/'+drawtype+'/'+drawType+'_'+layer+'.svg';*/
									context.drawImage(can, 0, 0, mainCanvas.width, mainCanvas.height);
									//var ctx = can.getContext('2d')
									//ctx.drawImage(img, 0, 0, width, height);
									alert('drew can');
									setTimeout(function(){
										mainCanvas.toBlob(function(blobb) {
											var fd = new FormData();
											fd.append("image", blobb);
											
											var uploadurl = '/api/uploadmedia/'+'#{pageindex}'+'/'+'#{index}'+'/main/0';

											$.ajax({
												url: uploadurl,
												type: 'POST',
												data: fd,
												processData: false,
												contentType: false,
												success: function(response) {
													$('#inputimg').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''));
													console.log('saved both')
													uiBlogMode();
												}
											})
										}, 'image/png', 0.95);
									},500)
									
								})
							}
						}
					})
				}, 'image/png', 0.95);
			} else {
				console.log('saving main')

				mainCanvas.toBlob(function(blob) {
					var fd = new FormData();
					
					fd.append("image", blob);
					
					var uploadurl = '/api/uploadmedia/'+'#{pageindex}'+'/'+'#{index}'+'/main/0';

					console.log(blob)
					console.log(uploadurl)
					$.ajax({
						url: uploadurl,
						type: 'POST',
						data: fd,
						processData: false,
						contentType: false,
						success: function(response) {
							
								$('#inputimg').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''));
									//$('#form').submit();
									uiBlogMode();//window.location.href = '/api/publish'
							}
						
					})
				}, 'image/png'/*, 0.95*/);
			}
		}
		//http://www.hnldesign.nl/work/code/mouseover-hover-on-touch-devices-using-jquery/
		$(document).on('touchstart, mouseover', '.translate', function (e) {
			var link = $(this); //preselect the link
			if (link.hasClass('hover')) {
				return true;
			} else {
				e.preventDefault();
				link.addClass('hover');
				$('a.taphover').not(this).removeClass('hover');
				var text = link.html();
				if (text.split('<')[1] === undefined) {
					text = encodeURIComponent(text);
					$.post('/translate/'+text+'').then(function(result){
						console.log(result)
						addAlert(result);
					})
				}
				return false;
			}
		});
		$(document).on('touchend, mouseleave', '.translate', function (e){
			var link = $(this); //preselect the link
			if (link.hasClass('hover')) {
				$('.translate').removeClass('hover');
			}
			removeOldAlert()
			return true;
		});
		