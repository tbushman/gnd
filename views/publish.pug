extends layout
block page
	- var ranks = ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth"];
	- var keys = ["tools", "info", "substrates", "filling"]

	if (doc)
		
		- var menu = 'doc'
		- var menuData = doc
		- var pageIndex = pageindex
	else
		if (pageindex)
			- var menu = 'doc'
			- var pageIndex = pageindex
			- var menuData = data[pageindex]
		else
			- var menu = 'home'
			- var pageIndex = data[data.length-1].pageindex
			- var menuData = data[data.length-1]
	if (index)
		- var contentData = menuData.content[index]
	else
		- var contentData = menuData.content[menuData.content.length-1]
		- var index = contentData.index

	- var layer = contentData.level
block content
	
	- var keys = ["tools", "info", "substrates", "filling"]

	input(type="hidden", value= pageIndex, id="pageindex")
		//-
			navigation
	div#select(class= type)
		div.menu(class= type)

			div.overtext #{menuData.pagetitle}
			div.blogname
				if (contentData.filling.length > 0)
					if (contentData.filling.length > 1)
						span.translate #{contentData.filling[1].name}
						span  and  
					span.translate #{contentData.filling[0].name}
			
			
			if (drawtype)
				if (menuData.publishers[0].username === loggedin)
						
					canvas.canvas.layer.topRight(id="canvas_"+drawtype+"_"+layer+"", style="z-index: "+layer+"; cursor: grab; background-image:url('/images/info/info_"+layer+".svg');")

			canvas.maincanvas.topRight(id="canvas", style="z-index: -1; background-image:url('/images/backgrounds/backgrounds_0.svg');")
			div.topLeft
		
		div.grid-container(class= type)

			include menu.pug
			if (doc)
				include docgallery.pug
			else
				include datagallery.pug
		
		div.pullquote
			if (drawtype)
				if (menuData.publishers[0].username === loggedin)
					each ing, j in keys
						each cat, i in contentData[ing]
							if (cat.unlocked && ing !== "info")
								a.tool(href="#", onclick="document.getElementById('form_"+ing+"_"+i+"').submit();")
									.ui
										img(src="/images/icons/"+ing+"_"+i+".svg")
									span.tb-font-l #{cat.name}
									if (cat.unlocked)
										form(id="form_"+ing+"_"+i+"", method="POST", enctype="multipart/form-data", action="/api/selectlayer/"+menuData.urltitle+"/"+menuData.pageindex+"/"+index+"/"+ing+"/"+i+"")
											input(type="hidden", value="1", name= cat.name)
											input(type="hidden", id="inputimg_"+ing+"_"+i+"", name= cat.name, value= cat.image)
			else
				if (contentData)
					each item, i in contentData.info
						if (item.unlocked && item.layer === contentData.level)
							span.tb-font-xxl.translate #{item.caption}
				else
					span.tb-font-xxl testing

	//-
		initiate map + event listeners
	script(type="text/javascript").
		const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
		var data = `'#{data}'`
		/*var pageindex = '#{pageindex}'*/
		var mainmenu = document.getElementsByClassName('menu')[0];
		var pageIndex, drawtype, layer;
		var datalength = #{data.length};
		var doc = `#{JSON.stringify(doc)}`;
		var lMarker;
		var medialength;
		var classname_a;
		var classname_b;
		// paint program adapted from https://rbyers.github.io/paint.html
		var radiusSupported = false;
		var nextCount = 0;
		var touchMap = {};
		var enableForce = false;
		var drawTouchMajor = true;
		var foundRotationAngle = false;
		var scale = 1;
		var mousePressed = false;
		var drawCoalesced = false;
		var elem, canvasWidth, canvasHeight;
		
		$(document).ready(function(){
			var can = document.getElementById('canvas');
			can.style.width = '100%';
			can.style.height = '100%';
			pageIndex = parseInt(document.getElementById('pageindex').value, 10);
			console.log('this pageindex'+pageIndex)
			var topmargin = document.querySelector('.pullquote').getBoundingClientRect().height;
			$('.grid-header.mainHeader').css('height', (topmargin + 30) + 'px');
			$('textarea').each(function(){
				var text;
				if ($(this).val()) {
					$(this).css('max-width', '100%')
				} else {
					//placeholder reliably contains updated text fsr
					text = $(this).attr('placeholder');
					$(this).val(text);
					$(this).css('max-width', '100%')
				} 
			});
			
			$('.list > .ms-Panel-main').css({display: 'none'})
			$('.list').removeClass('is-open')
			$('.list').css({display: 'none'});
			
			$('.dropdown').not('.mainmenu').slideUp(100);
			$('.drop').slideUp(100);
			$('.selected').removeClass('selected');
			drawtype = '#{drawtype}'
			layer = '#{layer}'
			var id = 'canvas_'+'#{drawtype}'+'_'+'#{layer}'+''
			if (document.getElementById(id) !== null) {
				
				InitializeApp(drawtype, parseInt(layer, 10));
			}
		})
		//http://www.hnldesign.nl/work/code/mouseover-hover-on-touch-devices-using-jquery/
		$(document).on('touchstart, mouseover', '.translate', function (e) {
			var link = $(this); //preselect the link
			if (link.hasClass('hover')) {
				return true;
			} else {
				e.preventDefault();
				link.addClass('hover');
				$('a.taphover').not(this).removeClass('hover');
				var text = link.html();
				if (text.split('<')[1] === undefined) {
					text = encodeURIComponent(text);
					$.post('/translate/'+text+'').then(function(result){
						console.log(result)
						addAlert(result);
					})
				}
				return false;
			}
		});
		$(document).on('touchend, mouseleave', '.translate', function (e){
			var link = $(this); //preselect the link
			if (link.hasClass('hover')) {
				$('.translate').removeClass('hover');
			}
			removeOldAlert()
			return true;
		})
		//edit mode
		$(document).on('click', '#deletefeature', function(){

			if ($('#deletefeature span').css('display') === 'block') {
				$(this).attr("href", "/api/deletefeature/"+pageIndex+"/"+#{index}+"");
			} else {
				$('#deletefeature span').css('display', 'block')
			}
		})
		
		$('#inputtext').on('keyup', function(e){
			$('#previewtext').html(marked(e.target.value))
		});
		$('input').on('keydown', function(e){
			if (e.key === 'Slash') {
				e.preventDefault();
			}
		})
		$(document).on('click', '#save', function(e){
			e.preventDefault();
			var id = 'canvas_'+'#{drawtype}'+'_'+'#{layer}'+''
			elem = document.getElementById(id);

			console.log('#{drawtype}', '#{layer}', id, elem);
			if (elem !== null) {
				saveImage(elem)
			}
		})
		
		function uiBlogMode(){
			$('div.menu.draw').removeClass('draw');
			$('div.menu').addClass('blog');
			$('.grid-container').removeClass('draw');
			$('.grid-container').addClass('blog');
			$('.grid-container').addClass('selected');
			$('#select').removeClass('draw');
			$('#select').addClass('blog');
		}
		function uiDrawMode(){
			$('div.menu.blog').removeClass('blog');
			$('div.menu').addClass('draw');
			$('.grid-container').removeClass('blog');
			$('.grid-container').addClass('draw');
			$('.grid-container').removeClass('selected');
			$('#select').removeClass('blog');
			$('#select').addClass('draw');
		}
		function InitializeApp(drawtype, layer) {
			console.log(drawtype, layer)
			var elem = document.getElementById('canvas_'+drawtype+'_'+layer+'');
			console.log(elem)
			InitializeCanvas(drawtype, layer);
			if (elem) {
				console.log("Adding MouseEvent & TouchEvent listeners");
				["mousedown", "mousemove", "mouseup"].forEach(function(e) {
						elem.addEventListener(e, MouseHandler);
				});
				["touchstart", "touchmove", "touchend"].forEach(function(e) {
						elem.addEventListener(e, TouchHandler);
				});
				window.addEventListener("resize", function(e) {
					InitializeCanvas(drawtype, layer);
				});
			}
			
		}
		function InitializeCanvas(drawtype, layer) {
			var canv = document.getElementById("canvas");
			//elem = document.getElementById("canvas_"+drawtype+"_"+layer+"");
			var newscale = window.devicePixelRatio ? window.devicePixelRatio : 1;
			if (navigator.platform.split('Mac')[1] !== undefined) {
				console.log(navigator.platform)
				newscale = 1
			}
			var newwidth = window.screen.width * newscale;
			var newheight = window.screen.height * newscale;
			var thislayer;
			if (canv.width != newwidth || canv.height != newheight || scale != newscale) {
				// resizing a canvas clears it, so do it only when it's dimensions have changed.
				canvasWidth = newwidth;
				canvasHeight = newheight;
				canv.width = canvasWidth;
				canv.height = canvasHeight;
				canv.style.width = newwidth + "px";
				canv.style.height = newheight + "px";
				var elem = document.getElementById('canvas_'+drawtype+'_'+layer+'');
				elem.width = canvasWidth;
				elem.height = canvasHeight;
				elem.style.width = newwidth + "px";
				elem.style.height = newheight + "px";
				scale = newscale;
			}
		}
		
		function MouseHandler(event) {

			if (event.type == "mousedown" && event.button === 0) {
				mousePressed = true;
			}
				
			if (mousePressed && event.button === 0) {
				var fakeTouch = {
					identifier : 10,
					pageX : event.pageX,
					pageY : event.pageY
				};
				
				var eventType = event.type ==  "mousedown" ? "touchstart" :
						event.type == "mouseup" ? "touchend" : "touchmove";

				drawTouch(event.target, fakeTouch, eventType, false);
				event.preventDefault();
			}

			if (event.type == "mouseup")
				mousePressed = false;
		}
		function TouchHandler(event) {
			event.preventDefault();
			
			if (!mainmenu.classList.contains('selected')) {
				for (var i = 0; i < event.changedTouches.length; i++)
					drawTouch(event.target, event.changedTouches[i], event.type, false);
			}
			
		}
		function drawTouch(eventTarget, touch, eventType, coalesced) {
			var context = eventTarget.getContext("2d");
			var drawType = eventTarget.getAttribute('id').split('_')[1];
			var layer = eventTarget.getAttribute('id').split('_')[2];
			
			// Map the identifier to a small count (no-op on Chrome, but
			// important for mobile Safari).
			if (!(touch.identifier in touchMap)) {
				touchMap[touch.identifier] = nextCount;
				nextCount++;
			}

			// Polyfill non-standard properties
			if (!("radiusX" in touch) && "webkitRadiusX" in touch)
				touch.radiusX = touch.webkitRadiusX;
			if (!("radiusY" in touch) && "webkitRadiusY" in touch)
				touch.radiusY = touch.webkitRadiusY;
			if (!("rotationAngle" in touch) && "webkitRotationAngle" in touch)
				touch.rotationAngle = touch.webkitRotationAngle;
			if (!("force" in touch) && "webkitForce" in touch)
				touch.force = touch.webkitForce;

			var radiusX = 35;
			var radiusY = 35;
			var rotationAngle = getAdjustedRotationAngle(touch.rotationAngle);
			foundRotationAngle = foundRotationAngle || rotationAngle;
			
			// Try to avoid start/end ellipses overlapping exactly
			if (eventType == "touchend") {
				radiusX++;
				radiusY++;
			}
			
			
			context.save();
			context.translate(touch.pageX * scale, touch.pageY * scale);
			context.rotate(rotationAngle);
			context.scale(1, radiusY/radiusX);
			context.beginPath();
			context.arc(0, 0, radiusX, 0, 2.0 * Math.PI, false);
			context.closePath();
			var pattern;
			var img = new Image();
			img.src = '/images/'+drawtype+'/'+drawType+'_'+layer+'.svg';
			img.onload = function(){
				
				if (eventType != "touchend") {
					if (drawType === 'filling') {
						pattern = context.createPattern(img, 'no-repeat');
						context.fillStyle = pattern;
						context.fill();
					}
				}
				if (eventType != "touchmove" && eventType != "touchbegin") {
					if (drawType === 'substrates') {
						img.width = Math.min(canvasWidth, canvasHeight);
						img.height = Math.min(canvasWidth, canvasHeight);
						img.style.width = Math.min(canvasWidth, canvasHeight) + "px";
						img.style.height = Math.min(canvasWidth, canvasHeight) + "px";
						pattern = context.createPattern(img, 'no-repeat');
						context.fillStyle = pattern;
						context.fillRect(0, 0, canvasWidth, canvasHeight);
					}
				}
				if (eventType == "touchbegin") {
					if (drawType === 'filling') {
						context.fillStyle = pattern;
					}
					if (drawType === 'tools') {
						context.fillStyle = "rgba(255,255,255,0)"
					}
					context.fill();
				}
			}
			
			
			context.restore();
		}
		
		function getAdjustedRotationAngle(angle) {
			return angle * Math.PI / 180;
		}
		
		function saveImage(can){
			if (!HTMLCanvasElement.prototype.toBlob) {
				Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
					value: function (callback, type, quality) {

						var binStr = atob( this.toDataURL(type, quality).split(',')[1] ),
							len = binStr.length,
							arr = new Uint8Array(len);

						for (var i = 0; i < len; i++ ) {
							arr[i] = binStr.charCodeAt(i);
						}

						callback( new Blob( [arr], {type: type || 'image/png'} ) );
					}
				});
			}
			layer = can.getAttribute('id').split('_')[2];
			drawtype = can.getAttribute('id').split('_')[1];
			if (drawtype && drawtype !== undefined) {
				can.toBlob(function(blob) {
					var fd = new FormData();
					
					fd.append('img_'+drawtype+'_'+layer+'', blob);
					
					var uploadurl = '/api/uploadmedia/'+pageIndex+'/'+#{index}+'/'+drawtype+'/'+layer+'';

					console.log(blob)
					console.log(uploadurl)
					$.ajax({
						url: uploadurl,
						type: 'POST',
						data: fd,
						processData: false,
						contentType: false,
						success: function(response) {
							$('#inputimg_'+drawtype+'_'+layer+'').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''));
							
							setTimeout(function(){
								$('#form').submit();
							}, 500);
							/*$('a.mainmenu').removeClass('dropdown');
							$('a.mainmenu').addClass('dropdown');
							$('a.mainmenu').attr('title', 'Menu');
							$('a.mainmenu').html('<img class="i" src="http://pu.bli.sh/images/menu_button.svg"></img>')*/
							//InitializeApp('#{drawtype}', '#{layer}');
						}
						
					})
				}, 'image/png'/*, 0.95*/);
			} else {
				can.toBlob(function(blob) {
					var fd = new FormData();
					
					fd.append("img", blob);
					
					var uploadurl = '/api/uploadmedia/'+pageIndex+'/'+#{index}+'/'+false+'/'+false+'';

					console.log(blob)
					console.log(uploadurl)
					$.ajax({
						url: uploadurl,
						type: 'POST',
						data: fd,
						processData: false,
						contentType: false,
						success: function(response) {
							
								$('#inputimg').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''));
								/*$('a.mainmenu').removeClass('dropdown');
								$('a.mainmenu').addClass('dropdown');
								$('a.mainmenu').attr('title', 'Menu');
								$('a.mainmenu').html('<img class="i" src="http://pu.bli.sh/images/menu_button.svg"></img>')*/
																//$('#form').submit();
								//InitializeApp('#{drawtype}', #{layer})
								setTimeout(function(){
									$('#form').submit();
								}, 500);
							}
						
					})
				}, 'image/png'/*, 0.95*/);
			}
		}