doctype html
html
	head
		title= appTitle
		meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no")
		//meta(http-equiv="x-dns-prefetch-control" content="on")
		link(rel="stylesheet", href="/stylesheets/default.css", type="text/css")
		link(href="https://fonts.googleapis.com/css?family=Roboto", rel="stylesheet")
		script(src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js")
		script(type="text/javascript", src="/scripts/jquery.min.js")
		script(type="text/javascript", src="/scripts/marked.min.js")
		script(type="text/javascript", src="/scripts/d3.v3.min.js")
		script(type="text/javascript", src="/scripts/moment-with-locales.min.js")

	body
		block page
			- var theStore = theStore
			
		block header
		block content
				

		a#publish_logo(href="https://github.com/tbushman/gnd" target="_blank")
			img(src="/images/publish_logo.svg")
		
		script(type="text/javascript").
			$(document).ready(function(){

				$('.dropdown').not('.mainmenu').slideUp(100);
				$('.drop').slideUp(100);
				
				$('.selected').removeClass('selected');

			})
			//- $(document).on('click', 'canvas', function(e){
			//- 	if ($('.menu').hasClass('blog')) {
			//- 		uiDrawMode()
			//- 	}
			//- });
			//drop-down event listener
			$(document).on('click', '.dropdown', function (e) { 
				//e.preventDefault();
				console.log(e.target)
				var that, main;
				if ($(this).hasClass('mainmenu')) {
					that = $('#tlmodules.dropdown');
					main = true;
				} else {
					that = this;
					main = false;
				}
				if ($(that).hasClass('selected')) {
					if (main && $('div.menu').hasClass('blog')) {
						$(that).slideUp(100);
						$(that).removeClass("selected");
					} else {
						if ($('div.menu').hasClass('blog')) {
							$(that).next('.drop').slideUp(100);
							
						}
					}
				} else {
					if (main && $('div.menu').hasClass('blog')) {
						$(that).slideDown(200);
						$(that).addClass('selected');
					} else {
						$(that).next('.drop').slideDown(200);
					}
				}
				//- if ($('div.menu').hasClass('draw')) {
				//- 
				//- 	//- uiBlogMode()
				//- } else {
				//- 	if ($('div.menu').hasClass('blog')) {
				//- 		uiBlogMode()
				//- 	}
				//- }
				//e.stopPropagation();
			});


		script(type="text/javascript").
			
			Vue.prototype.moment = moment;
			Vue.prototype.marked = marked;
			
			new Vue({ el: '#select',
				data() {
					return { 
						months: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
						pageIndex: null,
						//- drawtype: null,
						layer: null,
						data: this.parseObj(!{JSON.stringify(data)}),
						doc: this.parseObj(!{JSON.stringify(doc)}),
						infowindow: this.parseObj(!{JSON.stringify(infowindow)}),
						index: this.parseObj(!{JSON.stringify(index)}),
						pageIndex: this.parseObj(!{JSON.stringify(pageIndex)}),
						drawtype: this.parseObj(!{JSON.stringify(drawtype)}),
						type: this.parseObj(!{JSON.stringify(type)}),
						layer: this.parseObj(!{JSON.stringify(layer)}),
						radiusSupported: false,
						nextCount: 0,
						touchMap: {},
						foundRotationAngle: false,
						scale: 1,
						mousePressed: false,
						drawCoalesced: false,
						loadedLayer: this.loadedCanvas(),
						can: null,
						ctx: null,
						image: null,
						cW: window.innerWidth,
						cH: window.innerHeight,
						rX: 35,
						rY: 35,
						erase: false,
						cursor: 'pointer',
						mode: 'blog',
						ranks: ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth"],
						keys: ["tools", "filling"],
						loggedin: this.parseObj(!{JSON.stringify(session.loggedin)}),
						info: ''
					}
				},
				mounted() {
					var self = this;
					if (!self.image && self.doc && self.doc.content[self.index]) {
						self.drawImg();
					}
				},
				methods: {
					parseObj(ob) {
						if (!ob) return null;
						return ob;
					},
					getCursor() {
						var self = this;
						if (self.cursor !== 'pointer') {
							return "url('/images/icons/tools/tools_"+(self.erase ? 0 : 1)+".svg'), "+self.cursor+""
						}
					},
					drawImg() {
						var self = this;
						self.image = new Image();
						self.image.src = self.doc.content[self.index].image;
						if (self.image.complete && self.image.naturalHeight !== 0) {
							cx.drawImage(self.image, 0, 0, self.cW, self.cH);
						} else {
							self.image.onload = function () {
								cx.drawImage(self.image, 0, 0, self.cW, self.cH);
							}
						}
						//- this.drawImg = function() {
						//- 
						//- }

					},
					loadedCanvas() {
						
					},
					startD(e) {
						var self = this;
						if (!can) {
							self.can = e.target;
							self.ctx = can.getContext('2d');
						}
					},
					endD(e) {
						
					},
					mouseHandler(event) {
						if (event.type == "mousedown" && event.button === 0) {
							self.mousePressed = true;
						}
							
						if (self.mousePressed && event.button === 0) {
							var fakeTouch = {
								identifier : 10,
								pageX : event.pageX,
								pageY : event.pageY
							};
							
							var eventType = event.type ==  "mousedown" ? "touchstart" :
									event.type == "mouseup" ? "touchend" : "touchmove";

							drawTouch(event.target, fakeTouch, eventType, self.image);
							event.preventDefault();
						}

						if (event.type == "mouseup")
							mousePressed = false;
					},
					touchHandler(event) {
						event.preventDefault();
						
						for (var i = 0; i < event.changedTouches.length; i++) {
							drawTouch(event.target, event.changedTouches[i], event.type, self.image);
						}
						
					},
					drawTouch(eventTarget, touch, eventType, drawThis) {
						var self = this;
						var drawType = 'filling';
						var layer = 0;

						//- if (!(touch.identifier in self.touchMap)) {
						//- 	self.touchMap[touch.identifier] = self.nextCount;
						//- 	self.nextCount++;
						//- }

						//- // Polyfill non-standard properties
						//- if (!("radiusX" in touch) && "webkitRadiusX" in touch)
						//- 	touch.radiusX = touch.webkitRadiusX;
						//- if (!("radiusY" in touch) && "webkitRadiusY" in touch)
						//- 	touch.radiusY = touch.webkitRadiusY;
						//- if (!("rotationAngle" in touch) && "webkitRotationAngle" in touch)
						//- 	touch.rotationAngle = touch.webkitRotationAngle;
						//- if (!("force" in touch) && "webkitForce" in touch)
						//- 	touch.force = touch.webkitForce;
						//- 
						//- var rotationAngle = getAdjustedRotationAngle(touch.rotationAngle);
						//- foundRotationAngle = foundRotationAngle || rotationAngle;
						//- 
						//- // Try to avoid start/end ellipses overlapping exactly
						//- if (eventType == "touchend") {
						//- 	self.rX++;
						//- 	self.rY++;
						//- }
						self.cursor = 'grabbing'

						if (
							self.erase
							//- $('#erase').val() !== ''
						) {
							self.ctx.fillStyle = 'rgba(0,0,0,1)';
							self.ctx.globalCompositeOperation = "destination-out";//context.createPattern(pCanvas, 'no-repeat');
							self.ctx.fill();
						} else {
							eventTarget.setAttribute('style', 'cursor: url("/images/icons/tools_'+1+'.svg"), grabbing;');
							var pCanvas = document.createElement('canvas');
							pCanvas.width = self.cW;
							pCanvas.height = self.cH;
							var pContext = pCanvas.getContext('2d');
							pself.ctx.drawImage(drawThis, 0, 0, self.cW, self.cH);
							var pPattern = self.ctx.createPattern(pCanvas, 'no-repeat');
							self.ctx.fillStyle = pPattern;
							self.ctx.fill()
							
						}
						
						self.ctx.save();
						self.ctx.translate(touch.pageX * scale, touch.pageY * scale);
						self.ctx.scale(1, radiusY/radiusX);
						self.ctx.beginPath();
						self.ctx.arc(0, 0, radiusX, 0, 2.0 * Math.PI, false);
						self.ctx.closePath();
						self.ctx.restore();

					},
					getAdjustedRotationAngle(angle) {
						return angle * Math.PI / 180;
					},
					saveImage(){
						var self = this;
						self.can.toBlob(function(blob) {
							var fd = new FormData();
							fd.append(name, blob);
							
							// endpoint uses multer
							var uploadurl = '/api/uploadmedia/'+self.pageIndex+'/'+self.index+'/'+self.drawtype+'/'+self.layer+'';

							$.ajax({
								url: uploadurl,
								type: 'POST',
								data: fd,
								processData: false,
								contentType: false,
								success: function(response) {
									$('#inputimg').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''));
									self.mode = 'blog';
								}
							})
						}, 'image/png', 0.95);
					},
					uiBlogMode(){
						var self = this;
						self.type = 'blog'
					},
					checkNameValidity(event, aSearchTerm, aMsg)
					{
						var elem = event.target;//document.getElementById(aID);
						for (var i = 0; i < elem.value.length; i++) {
							if (aSearchTerm.indexOf(elem.value.charAt(i)) !== -1) {
								elem.setAttribute("aria-invalid", "true");
								addAlert(aMsg);
							} else {
								elem.setAttribute("aria-invalid", "false");
								//- removeOldAlert();
							}
							var check = elem.value
							//var check = $(elem).val();
							var url = check.replace(' ', '_');
							$.post('/sig/'+check).done(function(result){
								if (result === 'Available') {
									$('#append').remove(); 
									$('#response').append('<p class="tb-font-m" id="append">Available</p>');
									$.post('/reserve/'+check+'');
									$('#loginsection').css('display', 'block');
									$('#registersection').css('display', 'block')
									$('#pagetitle2').val(check);
					
								} else {
									$('#append').remove(); 
									$('#response').append('<p class="tb-font-m" id="append">That blog name is taken.</p>')
								}
							})
						}
					},
					checkEmailValidity(aID, aSearchTerm, aMsg)
					{
						var elem = document.getElementById(aID);
						console.log(aSearchTerm)
						if (elem.value.indexOf(aSearchTerm) === -1) {
							elem.setAttribute("aria-invalid", "true");
						} else {
							elem.setAttribute("aria-invalid", "false");
						}
					}
				}
			});
