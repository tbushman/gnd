doctype html
html
	head
		title= appTitle
		meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no")
		//meta(http-equiv="x-dns-prefetch-control" content="on")
		link(rel="stylesheet", href="/stylesheets/gpo.css", type="text/css")
		link(rel="stylesheet", href="/stylesheets/style.css", type="text/css")
		link(href="https://fonts.googleapis.com/css?family=Overpass,Merriweather", rel="stylesheet")
		link(rel="stylesheet", href="/stylesheets/leaflet.css")
		link(rel="stylesheet", href="/stylesheets/leaflet.draw.css")
		script(type="text/javascript", src="/scripts/jquery.min.js")
		//- script(src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js")
		script(type="text/javascript", src="/scripts/vue.min.js")
		script(type="text/javascript", src="/scripts/vue-pick-a-date.js")
		script(type="text/javascript", src="/scripts/marked.min.js")
		script(type="text/javascript", src="/scripts/d3.v3.min.js")
		script(type="text/javascript", src="/scripts/moment-with-locales.min.js")
		script(type="text/javascript", src="https://cloud.tinymce.com/stable/tinymce.min.js?apiKey=yb2pwtctf7qznwdoo61w3kyj127j61gch5uhhzneop9mfkg7")
		script(type="text/javascript", src="/scripts/leaflet.js")
		script(type="text/javascript", src="/scripts/Leaflet.Editable.js")
		script(type="text/javascript", src="/scripts/signaturePad.js")
		script(type="text/javascript", src="/scripts/htmldiff.js")
		//- script(type="text/javascript", src="/scripts/DrawCanvas.js")

	body(style="pointer-events: none;")
		block page
			
		block header
		block content
		#nomap(style="z-index:-1;")
		#map(style="pointer-events: all;")
		a#publish_logo(href="https://github.com/tbushman/gnd" target="_blank")
			img(src="/images/publish_logo.svg")
		
		a#publish_logo.tb-font-xxxs(href="//bli.sh/pp/blish", target="_blank", style="top: calc(100vh - var(--thumbwidth));right: 8px;margin:0;text-align:right;bottom: auto;") Privacy policy


		script(type="text/javascript").
			Vue.prototype.moment = moment;
			Vue.prototype.marked = marked;
			Vue.prototype.$ = $;
			Vue.prototype.DatePicker = DatePicker;
			Vue.prototype.SignaturePad = SignaturePad;
			Vue.prototype.tinymce = tinymce;
			Vue.prototype.htmldiff = htmldiff;
			Vue.use(DatePicker);
			new Vue({ el: '#select',
				data() {
					return { 
						rots: ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],
						unsigned: this.parseBool(!{JSON.stringify(unsigned)}),
						months: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
						menu: this.parseObj(!{JSON.stringify(menu)}),
						pu: this.ifNullThenObj(!{JSON.stringify(pu)}),//{properties: {}},
						dat: this.parseObj(!{JSON.stringify(dat)}),
						data: this.parseObj(!{JSON.stringify(data)}),
						doc: this.parseObj(!{JSON.stringify(doc)}),
						dids: [],
						did: (this.parseObj(!{JSON.stringify(doc)}) === '' ? 0 : this.parseObj(!{JSON.stringify(doc)}).index),
						dfi: 0,
						drawtype: this.parseObj(!{JSON.stringify(drawtype)}),
						// blog, draw, map
						type: this.parseStr(!{JSON.stringify(type)}),
						rep: {
							// TODO map: ['Community Organizer'],
							'ZIP4': ['resident', 'landlord', 'Community Organizer'],
							City: ['Council Member', 'Mayor'],
							State: ['House of Representatives', 'Senate'],
							County: ['Council Member', 'Mayor']
						},
						ranks: ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth"],
						keys: ["tools", "filling"],
						loggedin: this.parseObj(!{JSON.stringify(session.loggedin)}),
						info: this.parseObj(!{JSON.stringify(info)}),
						ff: this.parseObj(!{JSON.stringify(ff)}),
						uploadchtitle: null,
						dragind: null,
						latlngs: null,
						repitem: [],
						avail: this.parseBool(!{JSON.stringify(avail)}),
						pickerbegin: false,
						pickerend: false,
						beginDate: '',
						endDate: '',
						zoom: 6,
						sliderIndex: 0,
						n: 0,
						cursor: this.getCursor(),
						//- signatureDataUris: [],
						can: [],
						ts: [],
						tinymce: null,
						
						dd: false,
						accordions: 
							(
								this.parseObj(!{JSON.stringify(dat)}) !== '' ?
								[
									this.parseObj(!{JSON.stringify(dat)}).map(function(data){return []})
								] :
								[[]]
							)
					}
				},
				components: {
					canvasc: {
						//- props: ['pu'],
						//- inject: ['pu'],
						data: function() {
							return {
								signaturePad: null,
								ctx: null,
								dataUrl: null,
								pts: null,
								cW: window.innerWidth,
								cH: window.innerHeight,
								pu: this.$parent.pu
							}
						},
						mounted: function(){
							var self = this;
							self.signaturePad = new SignaturePad(self.$refs.canv, {
								onEnd: async function() {
									var ctx = self.$refs.canv.getContext('2d');
									ctx.font = '13px sans-serif';
									
									var ts = '/'+self.pu.properties.givenName+'/'+moment().utc().format();
									await ctx.clearRect(23, 132, 300, 32);
									//- ctx.fillStyle = 'rgba(0,0,0,0)';
									ctx.beginPath();
									//- ctx.fillRect(23, 132, 300, 32);
									//- ctx.fillStyle = '#000';
									ctx.fillText(ts, 23, 132);
									ctx.closePath();
									self.dataUrl = self.signaturePad.toDataURL()
									self.pts = self.signaturePad.toData();
									self.$emit('update', self.dataUrl, ts, self.$refs.canv);
									
								},
								onBegin: function() {
									
								}
							});
						},
						template: 
						//- '#signaturepad'
						`<canvas
							id="maincanvas"
							ref="canv"
						></canvas>`
					}
				},
				updated() {
					var self = this;
					//- if (!self.signature) 
					//- if (!self.signaturePad) self.signaturePad = self.$refs.canv
					//- if (self.pu && self.pu.properties.title) {
					//- 
					//- 	self.changePlace({
					//- 		target: {value:self.pu.properties.title}
					//- 	});
					//- }
				},
				mounted() {
					var self = this;
					
					document.addEventListener('keydown', function(event) {
					  var keyName = event.key;
						if (keyName === 'Enter') event.preventDefault()
					  //alert('keypress event\n\n' + 'key: ' + keyName);
					});
					$(document).on('click', '.href', function(e){
						e.stopPropagation();
					});
					//- self.sliderImg();
					self.dids = (self.data && self.data !== '' ? self.data.map(function(doc){
						return doc.index;
					}) : [(!self.doc || self.doc === '' ? 0 : self.doc.index)] );
					self.dids.sort();
					//- if (!self.doc) {
					//- 	if (self.data) {
					//- 		self.doc = self.data[0]
					//- 		console.log(self.doc)
					//- 	} else {
					//- 		if (self.dat[0]) {
					//- 			self.data = [].concat.apply([], self.dat);
					//- 		}
					//- 	}
					//- 	self.dids = [self.doc.index];
					//- 	self.did = 0;
					//- 	//- self.doc = (!self.data ? (!self.dat ? '': self.dat[0][0]) : self.data[0]);
					//- }
					if (self.pu && self.pu.properties.time) {
						self.beginDate = moment(self.pu.properties.time.begin).utc().format();
						self.endDate = moment(self.pu.properties.time.end).utc().format();
					}
					
					if (self.doc) {
						if (!self.tinymce && $('#description')[0] && tinymce) {
							console.log('shouldn\'t be')
							console.log($('#description')[0])
							self.tinymce = tinymce.init({
								menubar: false,
								statusbar: false,
								theme: 'inlite',
								inline: true,
								selector: "#description",
								plugins: ['lists', 'advlist'],
								valid_elements: '*[*]',
								forced_root_block: '',
								force_br_newlines : false,
								//- force_p_newlines : false,
								convert_newlines_to_brs: false,
								remove_redundant_brs: false,
								//- fix_list_elements: true,
								//- setup: function (editor) {
								//- 	editor.addButton('footnote', {
								//- 		text: 'Add footnote',
								//- 		icon: 'link',
								//- 		onclick: function(){
								//- 			self.doc.properties.footnotes.push(
								//- 				''
								//- 			);
								//- 			editor.insertContent('<a v-if="doc.properties.footnotes && doc.properties.footnotes['+(self.doc.properties.footnotes.length - 1)+']" href="ftnref'+(self.doc.properties.footnotes.length)+'"><span class="super">'+(self.doc.properties.footnotes.length)+'</span></a>')
								//- 			//editor.insertContent('<span v-if="doc.properties.footnotes && doc.properties.footnotes['+(self.doc.properties.footnotes.length - 1)+']" class="super">'+(self.doc.properties.footnotes.length)+'</span>')
								//- 			$('#footnote'+self.doc.properties.footnotes.length - 1).focus()
								//- 		}
								//- 	})
								//- },
								//custom_ui_selector: '.footnote_button',
								//- toolbar: 'bold italic underline | bullist numlist | outdent indent',
								selection_toolbar: 'bold italic | bullist numlist | outdent indent | subscript superscript'
								//selectiion_toolbar: 'undo redo | bold italic underline strikethrough | alignleft aligncenter alignright alignjustify alignnone | outdent indent blockquote | subscript superscript | bullist numlist | link unlink | table',
								//table_toolbar: "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"
								

							});
							

						}
						self.loadMap(function(dataLayer){
							/*if (!map) return;
							self.map = map;
							self.dataLayer = dataLayer;*/
							if (!dataLayer) return;
							self.dataLayer = dataLayer
							//- var point = self.map.latLngToLayerPoint(new L.LatLng(self.doc.geometry.coordinates[0], self.doc.geometry.coordinates[1]))
							var bounds = self.dataLayer.getBounds();
							self.map.fitBounds(bounds);
							console.log(dataLayer)
							if (dataLayer)
								self.dataLayer.enableEdit();
							self.lMarker = L.marker(self.map.getCenter(), {draggable: true}).addTo(self.map);
							//- if (!self.image && self.doc) {
							//- 	self.drawImg(function(img){
							//- 		self.img = img;
							//- 	});
							//- }//- self.panZoom();
							
						})
					}
				},
				watch: {
					can: function(e) {
						console.log(e)
						console.log("drawTouch changed");
					}
				},
				methods: {
					changeDiff(e) {
						var self = this;
						self.dfi = (!isNaN(parseInt(e.target.value, 10)) ? parseInt(e.target.value, 10) : null);
					},
					formatDate(date){
						return moment(date).utc().format();
					},
					pickerOpen(which, time){
						var self = this;
						if (which === 'begin') {
							self.pickerend = false;
							self.pickerbegin = true;
							self.beginDate = (time !== '' ? moment(time).utc().format() : moment().utc().format())
						}else {
							self.pickerbegin = false;
							self.pickerend = true;
							self.endDate = (time !== '' ? moment(time).utc().format() : moment().utc().format())

						}
					},
					ifNullThenObj(ob) {
						if (!ob) return {properties: {placetype:'', title:'', time: {begin:moment().utc().format(), end: moment().utc().format()}}};
						return ob;
					},
					parseBool: function(item) {
						if (!item) return false;
						return true;
					},
					parseStr(item) {
						if (!item) return '';
						return item;
					},
					parseObj(ob) {
						if (!ob) return '';
						return ob;
					},
					sliderImg(){
						var self = this;
						if ($('#slider')[0]) {
							setInterval(function(){
								$('#slider').css('opacity',0);
								setTimeout(function(){
									if (self.sliderIndex > 3) {
										self.sliderIndex = 1
									} else {
										self.sliderIndex += 1;
									}
									setTimeout(function(){
										$('#slider').css('opacity',1);
									},2000)
									
								},2000)
							},10000)
						}
					},
					dropdown(e) {
						// TODO convert all to Vue
						var self = this;
						//e.preventDefault();
						self.dd = !self.dd;
					},
					setBegin(e) {
						var self = this;
						if (!self.pu.properties.time) self.pu.properties.time = {};
						self.pu.properties.time.begin = e.target.value; 
					},
					setEnd(e) {
						var self = this;
						if (!self.pu.properties.time) self.pu.properties.time = {};
						self.pu.properties.time.end = e.target.value; 
					},
					changeTitle(e) {
						var self = this;
						//- if (!self.pu.properties.title) {
						self.pu.properties.title = e.target.value
					},
					changePlace(e) {
						var self = this;
						var etargetvalue = e.target.value;
						console.log(e)
						console.log(e.target.value)
						console.log(self.rep[e.target.value])

						if (!self.pu.properties) {
							self.pu.properties = {}
							self.pu.properties.placetype = etargetvalue
						} else {
							var place = self.pu.properties.place;
							self.pu.properties.placetype = etargetvalue;
							self.pu.properties.place = place;
						}
						self.repitem = self.rep[etargetvalue]
						console.log(self.repitem)
					},
					accordion: function(n, ind) {
						var self = this;
						if (self.accordions[n].indexOf(ind) === -1) {
							self.accordions[n].push(ind);
							self.accordions[n].sort();
						} else {
							self.accordions[n].splice(self.accordions[n].indexOf(ind), 1);
						}
					},
					getCursor() {
						var self = this;
						if (self.cursor !== 'pointer') {
							return "url('/images/tools/tools_"+(self.drawtype === 'substrates' ? 0 : 1)+".svg'), "+self.cursor+""
						}
					},
					initSig() {
						var self = this;
						self.type = 'draw';
						self.drawtype = 'filling';
						

					},
					setSigData(i, val, ts, can) {
						var self = this;
						Vue.set(self.can, i, can)
						Vue.set(self.ts, 0, ts)
						//- self.can = val;
					},
					updateSignature(index, url) {
						Vue.set(this.signatureDataUris, 0, url);
						//- console.log(this.signatureDataUris);
					},
					signatureToBlob(cb) {
						var self = this;
						//- if (!self.signatureDataUris[0]) return;
						//- var binStr = atob( self.signatureDataUris[0].split(',')[1].split(';')[0] ),
						//- len = binStr.length,
						//- arr = new Uint8Array(len);
						//- for (var i = 0; i < len; i++ ) {
						//- 	arr[i] = binStr.charCodeAt(i);
						//- }
						//- cb( new Blob( [arr], {type: 'image/png'} ) );
						console.log(self.can)
						if (!HTMLCanvasElement.prototype.toBlob) {
						 Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
							value: function (callback, type, quality) {
								var binStr = atob( this.toDataURL(type, quality).split(',')[1] ),
								len = binStr.length,
								arr = new Uint8Array(len);
								for (var i = 0; i < len; i++ ) {
									arr[i] = binStr.charCodeAt(i);
								}
								callback( new Blob( [arr], {type: type || 'image/png'} ) );
							}
						 });
						}
						self.can[0].toBlob(function(blob){
							console.log(blob)
							cb(blob);
						}, 'image/png')
					},
					saveSignature(){
						var self = this;
						var fd = new FormData();
						self.signatureToBlob(function(blob){
							fd.append('img', blob);
							fd.append('_csrf', '#{csrfToken}');
							fd.append('ts', self.ts);
							var uploadurl = '/sig/uploadsignature/'+self.doc._id+'/'+self.pu._id+'';
							console.log(blob)
							$.ajax({
								url: uploadurl,
								type: 'POST',
								data: fd,
								processData: false,
								contentType: false,
								success: function(response) {
									//- $('#inputimg').val(response);
									self.mode = 'blog';
									console.log(response)
									window.location.href = response
								}
							})
						})
					},
					panZoom: function(){
						var self = this;
						$.post('/panzoom/'+self.map.getCenter().lat+'/'+self.map.getCenter().lng+'/'+self.map.getZoom()+'', function(result){
						})
					},
					loadMap(cb) { 
						var self = this, dataLayer, 
						map = new L.map('map', { 
							//- maxBounds: L.latLngBounds([L.LatLng(43,-122),L.LatLng(-7,-188)]),
							center: (!self.doc || !self.doc.geometry.coordinates ? L.latLngBounds([40.7608, -111.8910]).getCenter() : L.latLngBounds(self.rxArr(self.doc.geometry.coordinates)).getCenter() ),

							//- L.latLngBounds(
								//- [
								//- 	(!self.doc.geometry.coordinates[1] ? 40.7608 : self.doc.geometry.coordinates[1]),
								//- 	(!self.doc.geometry.coordinates[0] ? -111.8910 : self.doc.geometry.coordinates[0])
								//- ]
															//- ).getCenter(),
							//- zoomControl: false, 
							zoom: 6,//(!self.position ? 6 : self.position.zoom), 
							minZoom: 4,	maxZoom: 18,
							editable: true,//(self.pu && self.pu.admin),
							renderer: L.canvas(),
							preferCanvas: true
						});
						//- console.log(map)
						//- L.control.zoom({ position:'bottomleft' }).addTo(map);
						var opts = { 
							attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',
							renderer: L.canvas({padding:0.5}),
							bounds: map.getBounds().pad(1000)
						};
						var t = 'https://api.mapbox.com/styles/v1/tbushman/ciq7gm0ov008kbfm580v9mm9c/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoidGJ1c2htYW4iLCJhIjoiSmI0aU94OCJ9.SZytljBzoWupPUYeu_OR9A'
						L.tileLayer(t, opts).addTo(map);

						map.on('zoomend', function(){ 
							if (self.doc) self.refreshMap(self.rxArr(self.doc.geometry.coordinates)) 
						});
						self.map = map;
						if (!self.dataLayer && self.data) {
							self.loadFeatures(self.data, cb);
						} else { 
							cb(self.dataLayer); 
						} 
					},

					/*************** Begin utility and maintenance  scripts ***************/
					checkNameValidity(type, aSearchTerm, aMsg, event)
					{
						var self = this;
						var elem = event.target;//document.getElementById(aID);
						for (var i = 0; i < elem.value.length; i++) {
							if (aSearchTerm.indexOf(elem.value.charAt(i)) !== -1) {
								elem.setAttribute("aria-invalid", "true");
								//- addAlert(aMsg);
							} else {
								elem.setAttribute("aria-invalid", "false");
								//- removeOldAlert();
							}
						}
						var check = elem.value;
						if (check !== '') {
							//var check = $(elem).val();
							var url = check.replace(' ', '_');
							$.post('/check/'+check).done(function(result){
								self.avail = (result === 'Available')
								if (self.avail) {
									$.post('/reserve/'+check+'');
									if (self.pu[type]) {
										self.pu[type] = check;
									} else if (self.pu.properties[type]) {
										self.pu.properties[type] = check;
									}
								}
							})
						}
					},
					checkEmailValidity(e)
					{
						var elem = e.target;//document.getElementById(aID);
						//- console.log(aSearchTerm)
						var rX = new RegExp('/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/')
						if (rX.test(elem.value)) {
							elem.setAttribute("aria-invalid", "false");
						} else {
							elem.setAttribute("aria-invalid", "true");
						}
					},
					xrOrNo(arr) {
						return ( arr[0] > arr[1] ? arr.reverse() : arr )
					},
					rxOrNo(arr) { 
						// TODO -- better conditional for whole planet
						return ( arr[0] < arr[1] ? arr.reverse() : arr ) 
					},
					xrArr(arr) {
						var self = this;
						if (!Array.isArray(arr[0])) return self.xrOrNo(arr);
						var rxa = arr.map(function(ar){ if (!Array.isArray(ar[0])) { 
							return self.xrOrNo(ar) } else if (Array.isArray(ar)) {
								return ar.map(function(a){ if (!Array.isArray(a[0])) { 
									return self.xrOrNo(a) } else if (Array.isArray(a)) {
										return a.map(function(b){ if (!Array.isArray(b[0])) { 
											return self.xrOrNo(b) } else if (Array.isArray(b)) {
												return b.map(function(c){ 
							if (!Array.isArray(c[0])) {return self.xrOrNo(c) }
							else {return} })} else {return} })} else {return} })} else {return}
						});
						console.log(arr)
						return arr; 
					},
					rxArr(arr) {
						var self = this;
						if (!Array.isArray(arr[0])) return self.rxOrNo(arr);
						var rxa = arr.map(function(ar){ if (!Array.isArray(ar[0])) { 
							return self.rxOrNo(ar) } else if (Array.isArray(ar)) {
								return ar.map(function(a){ if (!Array.isArray(a[0])) { 
									return self.rxOrNo(a) } else if (Array.isArray(a)) {
										return a.map(function(b){ if (!Array.isArray(b[0])) { 
											return self.rxOrNo(b) } else if (Array.isArray(b)) {
												return b.map(function(c){ 
							if (!Array.isArray(c[0])) {return self.rxOrNo(c) }
							else {return} })} else {return} })} else {return} })} else {return}
						});
						console.log(arr)
						return arr; 
					} /*Leaflet requires reversed geo-coordinate (lat, lng)*/,
					evalTime(time) {/*some time ranges in data require difference calc*/
						if (typeof time === 'Array') {
							let ntime = eval(time[0] - time[1])
							time = ntime;
						} else if (typeof time === 'Number') {

						} else {
							let now = new Date(), nYear = now.getFullYear(), nMonth = now.getMonth(), nDay = now.getDate();
							let then = new Date(time), yr = then.getFullYear(), mo = then.getMonth(), dy = then.getDate();
							const is30 = [8,3,5,10];
							const is31 = [0,2,4,6,7,9,11];
							const is28 = [1];
							let l = 0;
							function lp(d){
								let ret;
								ret = (l % 4 === 0 ? (d / 28) : (d / 29));
								return ret;
							}
							time = (nYear - yr) - (( nMonth / 11 ) - ( mo / 11 )  ) + ( 
								( is30.indexOf(nMonth) === -1 ?
										( is31.indexOf(nMonth) === -1 ?
									 			lp(nDay) : (nDay / 31)
										) :
										( nDay / 30 )
								) 
								- 
								( is30.indexOf(mo) === -1 ?
										( is31.indexOf(mo) === -1 ?
									 			(dy / 28) : (dy / 31)
										) :
										( dy / 30 ) 
								)
							)
						}
						return time; 
					},
					debounceF(fn) { /* skittle scroll speed */ 
						clearTimeout(this.dTimeout);
						this.dTimeout = setTimeout(fn, 1000); 
					},
					loadFeatures(ft, cb) {
						var self = this, dataLayer;
						var customIcon = L.icon({
							iconUrl: '/images/buttonmarker.svg',
							iconSize: [33, 33]
						});
					
						if (self.dataLayer) self.dataLayer.remove(); 
						var dataLayer = L.GeoJSON.geometryToLayer(self.doc, {
									// MongoDB stores coordinates as [lng, lat]
									// Leaflet uses [lat, lng]
									
									onEachFeature: function (feature, layer) {
										if (feature.geometry.type === 'Point') {
										}
										if (feature.geometry.type === 'Polygon') {
											//layer.setLatLngs(self.doc.geometry.coordinates[0])
											//self.latlngs = layer.getLatLngs()
										}
										
									},
									geometryToLayer: function(feature) {
										if (feature.geometry.type === 'Polygon') {
											//console.log(feature.geometry.type )
											var geojsonPolygonOptions = {
												fillColor: 'var(--highlight)',
												color: '#fff',
												weight: 2,
												opacity: 1,
												fillOpacity: 0.8,
												className: feature._id
												
											};
											var polygon = L.polygon(self.rxArr(feature.geometry.coordinates), geojsonPolygonOptions);
											//polygon.enableEdit();
											//polygon.on('dblclick', L.DomEvent.stop).on('dblclick', dataLayer.toggleEdit);
											return polygon;
										}
									},
									pointToLayer: function (feature, latlng) {
										if (feature.geometry.type === 'Point') {
											//console.log(feature)
											var geojsonMarkerOptions = {
												radius: 11,
												fillColor: 'var(--highlight)',
												color: '#fff',
												weight: 2,
												opacity: 1,
												fillOpacity: 0.8,
												className: feature._id+'@'+map.latLngToLayerPoint(latlng).x+','+map.latLngToLayerPoint(latlng).y+''
											};
											var circleMarker = L.circleMarker(latlng, geojsonMarkerOptions);
											return circleMarker;
										}
										
									}
								})//.addTo(map);
								
								//cb(map, dataLayer)
								self.map.addLayer(dataLayer);
						cb(dataLayer); 
					} /*map geatures*/,
					refreshMap(cd){ 
						var self = this, 
						lat,
						lng,
						center = self.map.getCenter();
						if (self.shape && self.shape !== '') {
							self.shape.remove();
						}
						if (!cd) { 
							lat = center.lat; lng = center.lng;
						} else if (Array.isArray(cd[0])) {
							self.shape = L.polygon(cd).addTo(self.map);
							lat = self.shape.getBounds().getCenter().lat;
							lng = self.shape.getBounds().getCenter().lng;
						} else { 
							lat = cd[0]; lng = cd[1]; 
						}
						// console.log(lat, lng)
						if (lat && lng) { 
							let latlng = new L.LatLng(lat, lng), nl;
							
							self.map.panTo(latlng);
							self.zoom = self.map.getZoom(); 
						}
					},
					toggleEdit: function(ind) {
						var self = this;
						this.edit = (!this.edit ? ind : null);
					},
				}
			});
		
		script(type='text/javascript', src='/scripts/leaflet-image_0_4_0.js')
		script(type="text/javascript", src="/scripts/Path.Drag.js")

