extends layout
block page
block content
	
	svg#vis
	input(type="hidden", id="hoverw")
	if (index1)
		include menu.pug
	
	div#screen
		div#text
			if (index2 && index2 !== 'undefined')
				input(type="hidden", value= data.children[index1])
				if (data.children[index1].children[index2].catch !== undefined)
					h1 #{data.children[index1].children[index2].catch}
					h2 #{data.children[index1].children[index2].call}
					h3 #{data.children[index1].children[index2].text}
			else
				h1 #{data.children[index1].catch}
				h2 #{data.children[index1].call}
				h3 #{data.children[index1].text}

		div#gradient
		div#radgradient
		if (index2 && index2 !== 'undefined')
			if (data.children[index1].children[index2].image)
				img(src= data.children[index1].children[index2].image)
			else
				div#pattern
		else
			if (data.children[index1].image)
				img(src= data.children[index1].image)
			else
				div#pattern

	script(type="text/javascript").
		var graph = JSON.parse(document.getElementById('data').value);
		//graph = JSON.parse(graph)//
		var myWidth = 100, myHeight = 100;
		
		/*if( typeof( window.innerWidth ) == 'number' ) {

			myWidth = window.innerWidth;
			myHeight = window.innerHeight;
		} else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {

			myWidth = document.documentElement.clientWidth;
			myHeight = document.documentElement.clientHeight;
		} else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {

			myWidth = document.body.clientWidth;
			myHeight = document.body.clientHeight;
		} else {
			myWidth = 400;
			myHeight = 300;
		}*/
		var	width = myWidth,
			height = myHeight,
			margin = 20;
		
		var root = d3.hierarchy(graph).sum(function(d){return d.size ? d.size:0;})//.sort(function(a,b){return b.value - a.value;})
		var pack = d3.pack()
		    .size([width, height])
		    .padding(2);
		var nodes = pack(root).descendants();
		var diameter = Math.min(width, height);
		var viz = d3.select("#vis");
		viz.attr("height", height);
		viz.attr("width", width);
		var g = viz.append('g').attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")").attr('class', 'flags')//.style('width', diameter+'px').style('height', diameter+'px');
		var color = d3.scaleLinear().domain([-1,5])
		    .range(["hsl(152,80%,80%)", "hsl(228,30%,40%)"])
		    .interpolate(d3.interpolateHcl);
		/*var gwidth = g.style('width');
		gwidth = gwidth.replace('px', '');
		gwidth = parseInt(gwidth, 10);
		var gheight = g.style('height');
		gheight = gheight.replace('px', '');
		gheight = parseInt(gheight, 10);*/

		var view,
		factor = 0,
		select = '#{select}',
		//focus = d3.select("[id='" + select + "']") ,
		count = 0,
		focus = root;
		
		if (graph.links !== undefined) {
			var simulation = d3.forceSimulation()
				.alphaDecay(0.03)
				.force("link", d3.forceLink().id(function(d, i) { return i; }).strength(0.07))
				.force("attractForce", d3.forceManyBody().strength(200).distanceMax(200).distanceMin(100))
				.force("repelForce", d3.forceManyBody().strength(-100).distanceMax(100).distanceMin(50))
				.force("chargeForce", d3.forceManyBody().strength(-100))
				.force("centeringForce", d3.forceCenter(width / 2, height / 2))
				.force("collisionForce", d3.forceCollide(function(d, i) {
					var thiswidth = d3.select('.flag-'+i+'').attr("width");
					if (thiswidth === null) {
						return 50
					} else {
						return thiswidth;
					}
				}))
			var set;
			var index1 = #{index1}
			
			
			var circle = g.selectAll('circle')
				.data(nodes)
				.enter().append('circle')
				.attr('id', function(d, i) {
					//SO -- 16075664
					if (i === 0) {
						return 'undefined_undefined';
					} else {
						if (d.height === 0) {
							//var indexes = []

							var thisparent = d.parent;
							var siblings = thisparent.children;							
							switch(d.depth) {
								case 1:
									for (var j = 0; j < siblings.length; j++) {
										if (siblings[j] === d) {
											return ''+j+'_undefined'
										} 
									}
									break
								case 2:
									var grandparent = thisparent.parent;
									var aunts = grandparent.children;
									for (var j = 0; j < siblings.length; j++) {
										for (var k = 0; k < aunts.length; k++) {
											if (siblings[j] === d && aunts[k] === thisparent) {
												return ''+k+'_'+j+''
											}
										}

									}
									break
								default: 
									for (var j = 0; j < siblings.length; j++) {
										if (siblings[j] === d) {
											return ''+j+'_undefined'
										} 
									}

							}
						} else {
							count++;
							return ''+count+'_undefined';
							
						}
					}
					
					
				})
				.attr('class', function (d, i) { return 'flag flag-' + i; })
				.style("fill", function(d) { return d.children ? color(d.depth) : color(color.length); })
				.on("click", function(d, i) { 
					if (d.children) {
						//d3.event.preventDefault();
						if (focus !== d) {
							factor = d.depth; 
							console.log(factor) 
							zoom(d)
						}
							
					} else {
						factor = 0;
						//$.get()
						window.location.href = '/focus/'+d3.select(this).attr('id').split('_')[0]+'/'+d3.select(this).attr('id').split('_')[1]+''
					}
					
					
				})					
				.call(d3.drag()
				.on("start", dragstarted)
				.on("drag", dragged)
				.on("end", dragended))
			
				/*.style('width', (width/10)+'px').style('height', (width/10)+'px')
				.attr('transform', "translate(" + width / 10 + "," + height / 10 + ")")
				.on('mouseenter', function(d){
					var i = $(this).attr('id');
					d3.select('.flag-'+i+'').transition()
					.style('width', width+'px').style('height', width+'px')
					.style('border-radius', 0)
					.attr('transform', "translate(" + width / 2 + "," + height / 2 + ")");
					d3.event.stopPropagation();
					d3.select('.flag-'+i+'').text(d.name)

				})
				.on('mouseleave', function(d){
					var i = $(this).attr('id');
					d3.select('.flag-'+i+'').text("").transition()
					.style('width', (Math.min(width, height)/10)+'px').style('height', (Math.min(width, height)/10)+'px')
					//.style('left', function (d) { return (d.x - d.width) + 'px';})
					//.style('top', function (d) { return (d.y - d.height) + 'px'; })
					.style('border-radius', '50%');
					d3.event.stopPropagation();
				})*/
				

			var text = g.selectAll("text")
			    .data(nodes)
			    .enter().append("text")
			      .attr("class", "label")
			      	.style('fill-opacity', 1)
					.style("fill-opacity", function(d) { 
						return d.parent === focus ? 1 : 0; })
					.style("fill", "#000")
			      
					.style("display", function(d) { return d.parent === focus ? "inline" : "none"; })
			      	.style('display', 'inline')
					.text(function(d) { return d.data.name; });
			
			var link = circle.enter().append("g")
				.attr("class", "links")
				.selectAll("line")
				.data(graph.links)
				.enter().append("line")
				.attr("stroke-width", 4);
			var node = g.selectAll('circle,text')
			console.log(node)
			var index1 = select.split('_')[0];
			var index2 = select.split('_')[1];
			if (index2 === 'undefined' || index2 === undefined) {
				if (index1 === 'undefined') {
					focus = root
				} else {
					focus = root.children[index1]
				}
				zoomTo([root.children[index1].x, root.children[index1].y, root.children[index1].r * 2 + margin]);
			} else {
				focus = root.children[index1].children[index2]
				zoomTo([root.children[index1].children[index2].x, root.children[index1].children[index2].y, root.children[index1].children[index2].r * 2 + margin]);
			}
			
			
			/*simulation
			.nodes(nodes)
			.on("tick", ticked);

			simulation.force("link")
			.links(graph.links);*/
			
							
			function ticked() {
				link.attr("x1", function(d) { return d.source.x; }).attr("y1", function(d) { return d.source.y; }).attr("x2", function(d) { return d.target.x; }).attr("y2", function(d) { return d.target.y; });
				circle.attr('r', function(d){return d.r})
				node.style('left', function (d) { return (d.x - ((function(d){return d.size ? d.size:d.r*2})/2)) + 'px'; })
				node.style('top', function (d) { return (d.y - ((function(d){return d.size ? d.size:d.r*2})/2)) + 'px'; });


			}

			function dragstarted(d) {
				if (!d3.event.active) {
					simulation.alphaTarget(0.3).restart();
				}
				d.fx = d.x;
			  	d.fy = d.y;
			}

			function dragged(d) {
				d.fx = d3.event.x;
				d.fy = d3.event.y;
			}

			function dragended(d) {
				if (!d3.event.active) {
					simulation.alphaTarget(0);
				}
				d.fx = null;
				d.fy = null;
			}
			function zoom(d) {
				focus = d;
				console.log(factor)
				if (d.children) {
					var transition = d3.transition()
				        .duration(d3.event.altKey ? 7500 : 750)
				        .tween("zoom", function(d) {
				          var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);
				          return function(t) { zoomTo(i(t)); };
				        });

				    transition.selectAll("text")
				      .filter(function(d) { return d.parent === focus || this.style.display === "inline"; })
				        .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })
				        .on("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })
				        .on("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });
				}
			}
			function zoomTo(v) {
				var k = diameter / v[2]; view = v;
			    node.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
			    //pack.size(function(d){return d.children ? [(width*d.depth),(height*d.depth)]: [width,height]})
				circle.attr("r", function(d) { return d.r * k; });
				circle.style("fill", function(d, i) { return d.children ? color(i) : color(color.length); })
			}
		}


		