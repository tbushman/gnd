#!/usr/bin/env node

/**
* Module dependencies.
*/

var app = require('../app');
var http = require('http');

/**
* Get port from environment and store in Express.
*/

var port = normalizePort(process.env.PORT || '7878');
app.set('port', port);

/**
* Create HTTP server.
*/

var server = http.createServer(app);
/* Cloudflare check */
// var cf = require('node_cloudflare');
// cf.load(function (error, fs_error)
// {
// 	if (fs_error)
// 	{
// 		throw new Error(fs_error);
// 	}
  server.listen(port);
	console.log('Server running.');
// });

/**
* Listen on provided port, on all network interfaces.
*/

server.on('error', onError);
server.on('listening', onListening);

/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
 	console.log('Listening on '+ bind);
}
